{"version":3,"file":"static/js/984.e53808a5.chunk.js","mappings":"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","sources":["components copy/searchModals/StationSearchModal.jsx","layouts/stations/profile/components/Header/index.js","layouts/stations/data/stationTableData.js","layouts/stations/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\n// import styles from \"../../styles/components/deliveryaddressmodal.module.scss\";\r\n// import styles from \"../../\"\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/stations/stationSlice\";\r\nimport { useDashDetails_1 } from \"../../hooks/DashDetails\";\r\n// import { resetValues } from \"../../features/employees/employeesSlice\";\r\n// import { useThemeContext } from \"../../hooks/ThemeContext\";\r\n// import QueryOrder from \"../QueryOrder\";\r\n// import QueryProduct from \"./QueryProduct\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function StationSearchModal({ isGettingStations }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <BiSort onClick={handleOpen} title=\"filter\" />\r\n        {/* <button onClick={handleOpen} title=\"filter\">\r\n          search\r\n        </button> */}\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box\r\n        //   sx={{ ...style, background: isDarkMode ? \"black\" : \"white\" }}\r\n        //   className={styles.box}\r\n        >\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Filter{\" \"}\r\n            <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which of your products are you looking for?</p>\r\n          <SearchStations\r\n            handleClose={handleClose}\r\n            isGettingStations={isGettingStations}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchStations = ({ handleClose, isGettingStations }) => {\r\n  const { searchStations } = useDashDetails_1();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n    // refetch();\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      {searchStations.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        // background={\"#3457bf\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingStations === \"pending\" ? (\r\n          <Loader1 color=\"success\" />\r\n        ) : (\r\n          \"Find Out\"\r\n        )}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nStationSearchModal.propTypes = {\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n\r\nSearchStations.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n","/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", station_name, location } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {station_name}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {location}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    station_name: \"First Name\",\r\n    location: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    station_name: PropTypes.string,\r\n    location: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport React from \"react\";\r\nimport { useStations } from \"features/stations/stationsThunk\";\r\nimport { setUpdateStation } from \"features/stations/stationSlice\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nexport default function stationTableData() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    isGettingStations,\r\n    stations: {\r\n      stations: Stations = [],\r\n      count = 0,\r\n      totalStations = 0,\r\n      numOfPages = 0,\r\n      totalHives = 0,\r\n      stationSizeCount = [],\r\n    } = {},\r\n    refetch,\r\n  } = useStations();\r\n  const Author = ({ image, name, location, station_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} name={name} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`/stations/${station_id}`}>{`${station_id} ${name}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{location}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`/employees/${title}`}>{`int_sup: ${title}`}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`/employees/${description}`}>{`ext_sup: ${description}`}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {title}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{description}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = Stations.map((station, i) => {\r\n    const {\r\n      station_id,\r\n      station_name,\r\n      supervisor_int,\r\n      supervisor_ext,\r\n      location,\r\n      longitude,\r\n      latitude,\r\n      station_size,\r\n      number_of_hive_boxes,\r\n      status,\r\n      station_maintainace_history,\r\n      last_inspection_date,\r\n      next_inspection_date,\r\n      notes,\r\n    } = station;\r\n    const payload = {\r\n      station_name,\r\n      supervisor_int,\r\n      supervisor_ext,\r\n      location,\r\n      longitude,\r\n      latitude,\r\n      station_size,\r\n      number_of_hive_boxes,\r\n      status,\r\n      station_maintainace_history,\r\n      last_inspection_date,\r\n      next_inspection_date,\r\n      notes,\r\n    };\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateStation(payload));\r\n    };\r\n    return {\r\n      station: (\r\n        <Author image={LogoAsana} name={station_name} location={location} station_id={station_id} />\r\n      ),\r\n      supervisors: <Job title={supervisor_int} description={supervisor_ext} />,\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={status}\r\n            color={status === \"active\" ? \"success\" : status === \"inactive\" ? \"error\" : \"warning\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      size: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={station_size}\r\n            color={\r\n              station_size === \"small\" ? \"success\" : station_size === \"medium\" ? \"error\" : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      coordinates: (\r\n        <Coord\r\n          title={`Longitude: ${Number(longitude)?.toFixed(2) || \"N/A\"}`}\r\n          description={`Latitude: ${Number(latitude)?.toFixed(2) || \"N/A\"}`}\r\n        />\r\n      ),\r\n      action: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatestation/${station_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"station\", accessor: \"station\", width: \"45%\", align: \"left\" },\r\n      { Header: \"supervisors\", accessor: \"supervisors\", align: \"left\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"size\", accessor: \"size\", align: \"center\" },\r\n      { Header: \"coordinates\", accessor: \"coordinates\", align: \"center\" },\r\n      { Header: \"action\", accessor: \"action\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    totalStations,\r\n    numOfPages,\r\n    totalHives,\r\n    stationSizeCount,\r\n    isGettingStations,\r\n    refetch,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport stationTableData from \"./data/stationTableData\";\r\nimport { changePage } from \"features/stations/stationSlice\";\r\nimport { resetValues } from \"features/stations/stationSlice\";\r\nimport StationSearchModal from \"components copy/searchModals/StationSearchModal\";\r\nimport { useSingleStation } from \"features/stations/stationsThunk\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport { useDashDetails_1 } from \"hooks/DashDetails\";\r\nimport { useCreateStation } from \"features/stations/stationsThunk\";\r\nimport { useUpdateStation } from \"features/stations/stationsThunk\";\r\nfunction Stations() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    totalStations,\r\n    totalHives,\r\n    isGettingStations,\r\n    refetch,\r\n  } = stationTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  const {\r\n    pages,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    status,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    sort,\r\n  } = useSelector((store) => store.stations);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    status,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography variant=\"h6\" color=\"white\">\r\n                  Stations\r\n                  {count}/{totalStations}\r\n                  <Link onClick={() => dispatch(resetValues())} to=\"/createupdatestation/add\">\r\n                    create station\r\n                  </Link>\r\n                  <StationSearchModal isGettingStations={isGettingStations} />\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Stations;\r\n\r\nexport function SingleStation() {\r\n  const { id } = useParams();\r\n  const {\r\n    isGettingSingleStation,\r\n    singleStation: {\r\n      station: {\r\n        honey_harvests = [],\r\n        last_inspection_date,\r\n        latitude,\r\n        location,\r\n        longitude,\r\n        next_inspection_date,\r\n        notes,\r\n        number_of_hive_boxes,\r\n        station_id,\r\n        station_maintainace_history,\r\n        station_name,\r\n        station_size,\r\n        status,\r\n        supervisor_ext,\r\n        supervisor_int,\r\n      } = {},\r\n    } = {},\r\n    refetch,\r\n  } = useSingleStation(id);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image: LogoAsana, station_name, location }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/stations\">Go back</Link>\r\n          <Link to=\"/harvests\">back to harvest</Link>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  station_id,\r\n                  station_Name: station_name,\r\n                  location,\r\n                  station_size,\r\n                  status,\r\n                  hive_boxes: number_of_hive_boxes,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  longitude: Number(longitude)?.toFixed(2) || \"N/A\",\r\n                  latitude: Number(latitude)?.toFixed(2) || \"N/A\",\r\n\r\n                  internal_supervisor: (\r\n                    <Link to={`/employees/${supervisor_int}`}>{supervisor_int}</Link>\r\n                  ),\r\n                  external_supervisor: (\r\n                    <Link to={`/employees/${supervisor_ext}`}>{supervisor_ext}</Link>\r\n                  ),\r\n                  last_inspection: last_inspection_date\r\n                    ? moment(last_inspection_date).format(\"YYYY-MM-DD\")\r\n                    : \"N/A\",\r\n                  next_inspection: next_inspection_date\r\n                    ? moment(next_inspection_date).format(\"YYYY-MM-DD\")\r\n                    : \"N/A\",\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  maintaince: station_maintainace_history,\r\n                  notes,\r\n                  ...(honey_harvests.length > 0 && {\r\n                    honey_harvests: honey_harvests\r\n                      .map(\r\n                        (\r\n                          { harvest_year, harvest_date, quantity_collected, unit, quality_rating },\r\n                          index\r\n                        ) =>\r\n                          `Harvest ${\r\n                            index + 1\r\n                          }: Year: ${harvest_year}, Date: ${harvest_date}, Quantity: ${quantity_collected} ${unit}, Rating: ${quality_rating}/5`\r\n                      )\r\n                      .join(\" | \"), // Join them as a single string with a separator like \" | \" or \"\\n\"\r\n                  }),\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport const CreateUpdateStation = () => {\r\n  const { id } = useParams();\r\n  const { station_details } = useDashDetails_1();\r\n  const { createStation, isCreatingStation } = useCreateStation();\r\n  const { updateStation, isUpdatingStation } = useUpdateStation();\r\n  const {\r\n    isEdit,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n    pages,\r\n  } = useSelector((store) => store.stations);\r\n  const stationDetails = {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    notes,\r\n  };\r\n\r\n  const stationdetailsOnEdit = {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Conditionally include inspection dates in the validation check if isEdit is true\r\n    const detailsToValidate = isEdit ? stationdetailsOnEdit : stationDetails;\r\n\r\n    const isValid = Object.values(detailsToValidate).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields,especially the dates field if available.\");\r\n      return;\r\n    }\r\n\r\n    if (isEdit) {\r\n      return updateStation({ stationdetailsOnEdit, id });\r\n    }\r\n\r\n    createStation(stationDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Link to=\"/stations\"> back to stations</Link>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n            <div>\r\n              <form onSubmit={handleSubmit}>\r\n                {station_details\r\n                  .filter((detail) => {\r\n                    if (\r\n                      detail.name === \"sort\" ||\r\n                      (!isEdit &&\r\n                        (detail.name === \"next_inspection_date\" ||\r\n                          detail.name === \"last_inspection_date\"))\r\n                    ) {\r\n                      return false; // Exclude these fields in edit mode\r\n                    }\r\n                    return true; // Include all other fields\r\n                  })\r\n                  .map((detail) => {\r\n                    const { name, TextField } = detail;\r\n                    return <div key={name}>{TextField}</div>;\r\n                  })}\r\n\r\n                <CustomButton\r\n                  background={\"#1212121F\"}\r\n                  backgroundhover={\"#59d9d9\"}\r\n                  size={\"100%\"}\r\n                  height={\"3vh\"}\r\n                  type=\"submit\"\r\n                  // disabled={!isValid}\r\n                >\r\n                  {isCreatingStation === \"pending\" || isUpdatingStation === \"pending\" ? (\r\n                    <Loader1 />\r\n                  ) : isEdit ? (\r\n                    \"Update\"\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </CustomButton>\r\n              </form>\r\n            </div>\r\n            <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["StationSearchModal","_ref","isGettingStations","open","setOpen","React","handleClose","_jsxs","children","_jsx","BiSort","onClick","handleOpen","title","Modal","onClose","Box","Typography","id","variant","component","CloseIcon","style","cursor","SearchStations","_ref2","searchStations","useDashDetails_1","dispatch","useDispatch","map","input","name","TextField","CustomButton","background","backgroundhover","height","resetQuery","resetValues","type","width","fontWeight","Loader1","color","Header","info","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","station_name","location","MDBox","position","mb","display","alignItems","minHeight","borderRadius","sx","backgroundImage","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","lineHeight","MDTypography","defaultProps","stationTableData","stations","Stations","count","totalStations","numOfPages","totalHives","stationSizeCount","refetch","useStations","Author","station_id","ml","Link","to","Job","description","textAlign","Coord","_ref3","columns","accessor","align","rows","station","i","_Number","_Number2","supervisor_int","supervisor_ext","longitude","latitude","station_size","number_of_hive_boxes","status","station_maintainace_history","last_inspection_date","next_inspection_date","notes","payload","LogoAsana","supervisors","MDBadge","badgeContent","coordinates","Number","toFixed","action","setUpdateStation","pages","sort","useSelector","store","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","SingleStation","useParams","isGettingSingleStation","singleStation","honey_harvests","useSingleStation","md","xl","Divider","orientation","mr","ProfileInfoCard","station_Name","hive_boxes","internal_supervisor","external_supervisor","last_inspection","moment","format","next_inspection","maintaince","length","index","harvest_year","harvest_date","quantity_collected","unit","quality_rating","join","CreateUpdateStation","station_details","createStation","isCreatingStation","useCreateStation","updateStation","isUpdatingStation","useUpdateStation","isEdit","stationDetails","stationdetailsOnEdit","onSubmit","e","detailsToValidate","Object","every","undefined","alert","filter","detail"],"sourceRoot":""}