{"version":3,"file":"static/js/984.cf92982e.chunk.js","mappings":"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","sources":["components copy/searchModals/StationSearchModal.jsx","hooks/DashDetails.jsx","layouts/stations/profile/components/Header/index.js","layouts/stations/data/stationTableData.js","layouts/stations/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/stations/stationSlice\";\r\nimport { useDashDetails_1 } from \"../../hooks/DashDetails\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport styles from \"../../layouts/styles/modal.module.scss\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function StationSearchModal({ isGettingStations }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <SearchIcon\r\n          fontSize=\"medium\"\r\n          onClick={handleOpen}\r\n          sx={{ cursor: \"pointer\", fill: \"white\" }}\r\n          title=\"search\"\r\n        />\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, background: \"white\" }} className={styles.box}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Search Stations <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which station you looking for?</p>\r\n          <SearchStations handleClose={handleClose} isGettingStations={isGettingStations} />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchStations = ({ handleClose, isGettingStations }) => {\r\n  const { searchStations } = useDashDetails_1();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n    // refetch();\r\n  };\r\n\r\n  return (\r\n    <form className={styles.paper}>\r\n      {searchStations.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingStations === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nStationSearchModal.propTypes = {\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n\r\nSearchStations.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport { handelChange, handleDob } from \"../features/stations/stationSlice\";\r\nimport { handleDate, handleChangeEquip } from \"../features/equuipments/equipmentSlice\";\r\nimport { convertToDateOnly } from \"../utils\";\r\nimport {\r\n  DateRegister,\r\n  GenderInput,\r\n  MultiLineInput,\r\n  RangeSlider,\r\n  UserInput,\r\n} from \"../components copy\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { handleChangeSupp, handleDateSupp } from \"../features/supplies/suppliesSlice\";\r\nimport { handleDateProducts } from \"features/products/productsSlice\";\r\nimport { handleChangeProducts } from \"features/products/productsSlice\";\r\n\r\nexport const useDashDetails_1 = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n    sort,\r\n  } = useSelector((store) => store.stations);\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\r\n      \"supervisor_int\",\r\n      \"supervisor_ext\",\r\n      \"longitude\",\r\n      \"latitude\",\r\n      \"number_of_hive_boxes\",\r\n    ];\r\n\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (\r\n      numericFields.includes(name) &&\r\n      ![\"longitude\", \"latitude\"].includes(name) &&\r\n      processedValue < 1\r\n    ) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handelChange({ name, value: processedValue }));\r\n  };\r\n\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDob({ name, date: formattedDate }));\r\n  };\r\n  const station_details = [\r\n    {\r\n      name: \"station_name\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"station_name\"}\r\n          value={station_name}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supervisor_int\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"supervisor_int\"}\r\n          value={supervisor_int}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supervisor_ext\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"supervisor_ext\"}\r\n          value={supervisor_ext}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"location\",\r\n      TextField: (\r\n        <UserInput name={\"location\"} value={location} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"longitude\",\r\n      TextField: (\r\n        <UserInput name={\"longitude\"} value={longitude} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"latitude\",\r\n      TextField: (\r\n        <UserInput name={\"latitude\"} value={latitude} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"station_size\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"station_size\"}\r\n          value={station_size}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"small\", \"medium\", \"large\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"number_of_hive_boxes\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"number_of_hive_boxes\"}\r\n          value={number_of_hive_boxes}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"active\", \"inactive\", \"terminated\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"station_maintainace_history\",\r\n      TextField: (\r\n        <MultiLineInput\r\n          name={\"station_maintainace_history\"}\r\n          value={station_maintainace_history}\r\n          type={\"text\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"last_inspection_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"last_inspection_date\"}\r\n          value={last_inspection_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"next_inspection_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"next_inspection_date\"}\r\n          value={next_inspection_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"notes\",\r\n      TextField: (\r\n        <MultiLineInput name={\"notes\"} value={notes} type={\"text\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"A-Z\", \"Z-A\", \"high-low\", \"low-high\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchStations = station_details.filter((detail) =>\r\n    [\r\n      \"station_name\",\r\n      \"location\",\r\n      \"station_size\",\r\n      \"status\",\r\n      \"supervisor_int\",\r\n      \"supervisor_ext\",\r\n      \"number_of_hive_boxes\",\r\n      \"sort\",\r\n      //   \"last_inspection_date\",\r\n      //   \"next_inspection_date\",\r\n    ].includes(detail.name)\r\n  );\r\n  return { station_details, searchStations };\r\n};\r\n\r\nexport const useEquipments = () => {\r\n  const {\r\n    tool_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    purchase_date,\r\n    purchase_cost,\r\n    currency,\r\n    last_maintanace_date,\r\n    next_maintanace_date,\r\n    retired,\r\n    note,\r\n    sort,\r\n  } = useSelector((store) => store.equipments);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDate({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\"quantity\", \"purchase_cost\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n\r\n    dispatch(handleChangeEquip({ name, value: processedValue }));\r\n  };\r\n  const equipmentDetails = [\r\n    {\r\n      name: \"tool_name\",\r\n      TextField: (\r\n        <UserInput name={\"tool_name\"} value={tool_name} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_cost\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"purchase_cost\"}\r\n          value={purchase_cost}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supplier\",\r\n      TextField: (\r\n        <UserInput name={\"supplier\"} value={supplier} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"currency\",\r\n      TextField: (\r\n        <UserInput name={\"currency\"} value={currency} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"category\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"category\"}\r\n          value={category}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"beekeping\", \"carpentary\", \"processing\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"retired\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"retired\"}\r\n          value={retired}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"retired\", \"not retired\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"used\", \"new\", \"need repair\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"storage_location\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"storage_location\"}\r\n          value={storage_location}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"warehouse\", \"apiary site\", \"factory\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_date\",\r\n      TextField: <DateRegister name={\"purchase_date\"} value={purchase_date} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"last_maintanace_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"last_maintanace_date\"}\r\n          value={last_maintanace_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"next_maintanace_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"next_maintanace_date\"}\r\n          value={next_maintanace_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"note\",\r\n      TextField: (\r\n        <MultiLineInput name={\"note\"} value={note} type={\"text\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"high-purchase-cost\", \"low-purchase-cost\", \"A-Z\", \"Z-A\", \"recent\", \"old\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchEquipments = equipmentDetails.filter((detail) =>\r\n    [\r\n      \"tool_name\",\r\n      \"category\",\r\n      \"status\",\r\n      \"storage_location\",\r\n      \"supplier\",\r\n      \"currency\",\r\n      \"retired\",\r\n      \"quantity\",\r\n      \"purchase_cost\",\r\n      \"purchase_date\",\r\n      \"sort\",\r\n    ].includes(detail.name)\r\n  );\r\n\r\n  return { equipmentDetails, searchEquipments };\r\n};\r\n\r\nexport const useSuppliesInputs = () => {\r\n  const {\r\n    supply_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    minimum_stock_level,\r\n    purchase_date,\r\n    purchase_cost,\r\n    sort,\r\n  } = useSelector((store) => store.supplies);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDateSupp({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\"quantity\", \"purchase_cost\", \" minimum_stock_level\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handleChangeSupp({ name, value: processedValue }));\r\n  };\r\n  const suppliesDetails = [\r\n    {\r\n      name: \"supply_name\",\r\n      TextField: (\r\n        <UserInput name={\"supply_name\"} value={supply_name} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"category\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"category\"}\r\n          value={category}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"processing\", \"packaging\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"used\", \"new\", \"need repair\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"storage_location\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"storage_location\"}\r\n          value={storage_location}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"warehouse\", \"factory\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supplier\",\r\n      TextField: (\r\n        <UserInput name={\"supplier\"} value={supplier} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_cost\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"purchase_cost\"}\r\n          value={purchase_cost}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_date\",\r\n      TextField: <DateRegister name={\"purchase_date\"} value={purchase_date} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"minimum_stock_level\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"minimum_stock_level\"}\r\n          value={minimum_stock_level}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"high-low\", \"low-high\", \"high-stock\", \"low-stock\", \"recent\", \"old\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchSupplies = suppliesDetails.filter((detail) =>\r\n    [\r\n      \"supply_name\",\r\n      \"category\",\r\n      \"quantity\",\r\n      \"status\",\r\n      \"storage_location\",\r\n      \"supplier\",\r\n      \"purchase_cost\",\r\n      \"purchase_date\",\r\n    ].includes(detail.name)\r\n  );\r\n  return { suppliesDetails, searchSupplies };\r\n};\r\nexport const useProductsInputs = () => {\r\n  const {\r\n    sort,\r\n    product_name,\r\n    product_type,\r\n    description,\r\n    quantity,\r\n    total_in_stock,\r\n    unit,\r\n    harvest_year,\r\n    packaging_type,\r\n    // available,\r\n    price,\r\n    priceRangePP,\r\n  } = useSelector((store) => store.products);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDateProducts({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    // console.log(name, value);\r\n    const numericFields = [\"quantity\", \"price\", \"total_in_stock\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handleChangeProducts({ name, value: processedValue }));\r\n  };\r\n  const productDetails = [\r\n    {\r\n      name: \"product_name\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"product_name\"}\r\n          value={product_name}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"product_type\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"product_type\"}\r\n          value={product_type}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"honey\", \"wax\", \"propolis\", \"royal jelly\", \"venom\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"description\",\r\n      TextField: (\r\n        <MultiLineInput\r\n          name={\"description\"}\r\n          value={description}\r\n          type={\"text\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"total_in_stock\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"total_in_stock\"}\r\n          value={total_in_stock}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"unit\",\r\n      TextField: <UserInput name={\"unit\"} value={unit} type={\"name\"} handleChange={getInput} />,\r\n    },\r\n    {\r\n      name: \"harvest_year\",\r\n      TextField: <DateRegister name={\"harvest_year\"} value={harvest_year} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"packaging_type\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"packaging_type\"}\r\n          value={packaging_type}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    // {\r\n    //   name: \"available\",\r\n    //   TextField: (\r\n    //     <GenderInput\r\n    //       name={\"available\"}\r\n    //       value={available}\r\n    //       type={\"text\"}\r\n    //       gender={[\"---\", \"available\", \"not available\"]}\r\n    //       handleChange={getInput}\r\n    //     />\r\n    //   ),\r\n    // },\r\n    {\r\n      name: \"price\",\r\n      TextField: <UserInput name={\"price\"} value={price} type={\"number\"} handleChange={getInput} />,\r\n    },\r\n    {\r\n      name: \"priceRangePP\",\r\n      TextField: (\r\n        <RangeSlider name={\"priceRangePP\"} value={priceRangePP} min={1000} max={100000} step={2000} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\r\n            \"---\",\r\n            \"high-low\",\r\n            \"low-high\",\r\n            \"high-rating\",\r\n            \"low-rating\",\r\n            \"high-review\",\r\n            \"low-review\",\r\n            \"high-sell\",\r\n            \"low-sell\",\r\n          ]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  // const searchSupplies = productDetails.filter((detail) =>\r\n  //   [\r\n  //     \"supply_name\",\r\n  //     \"category\",\r\n  //     \"quantity\",\r\n  //     \"status\",\r\n  //     \"storage_location\",\r\n  //     \"supplier\",\r\n  //     \"purchase_cost\",\r\n  //     \"purchase_date\",\r\n  //   ].includes(detail.name)\r\n  // );\r\n  return { productDetails };\r\n};\r\n","/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", station_name, location } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {station_name}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {location}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    station_name: \"First Name\",\r\n    location: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    station_name: PropTypes.string,\r\n    location: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport React from \"react\";\r\nimport { useStations } from \"features/stations/stationsThunk\";\r\nimport { setUpdateStation } from \"features/stations/stationSlice\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nexport default function stationTableData() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    isGettingStations,\r\n    stations: {\r\n      stations: Stations = [],\r\n      count = 0,\r\n      totalStations = 0,\r\n      numOfPages = 0,\r\n      totalHives = 0,\r\n      stationSizeCount = [],\r\n    } = {},\r\n    refetch,\r\n  } = useStations();\r\n  const Author = ({ image, name, location, station_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} name={name} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`/stations/${station_id}`}>{`${station_id} ${name}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{location}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`/employees/${title}`}>{`int_sup: ${title}`}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`/employees/${description}`}>{`ext_sup: ${description}`}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {title}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{description}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = Stations.map((station, i) => {\r\n    const {\r\n      station_id,\r\n      station_name,\r\n      supervisor_int,\r\n      supervisor_ext,\r\n      location,\r\n      longitude,\r\n      latitude,\r\n      station_size,\r\n      number_of_hive_boxes,\r\n      status,\r\n      station_maintainace_history,\r\n      last_inspection_date,\r\n      next_inspection_date,\r\n      notes,\r\n    } = station;\r\n    const payload = {\r\n      station_name,\r\n      supervisor_int,\r\n      supervisor_ext,\r\n      location,\r\n      longitude,\r\n      latitude,\r\n      station_size,\r\n      number_of_hive_boxes,\r\n      status,\r\n      station_maintainace_history,\r\n      last_inspection_date,\r\n      next_inspection_date,\r\n      notes,\r\n    };\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateStation(payload));\r\n    };\r\n    return {\r\n      station: (\r\n        <Author image={LogoAsana} name={station_name} location={location} station_id={station_id} />\r\n      ),\r\n      supervisors: <Job title={supervisor_int} description={supervisor_ext} />,\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={status}\r\n            color={status === \"active\" ? \"success\" : status === \"inactive\" ? \"error\" : \"warning\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      size: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={station_size}\r\n            color={\r\n              station_size === \"small\" ? \"success\" : station_size === \"medium\" ? \"error\" : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      coordinates: (\r\n        <Coord\r\n          title={`Longitude: ${Number(longitude)?.toFixed(2) || \"N/A\"}`}\r\n          description={`Latitude: ${Number(latitude)?.toFixed(2) || \"N/A\"}`}\r\n        />\r\n      ),\r\n      action: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatestation/${station_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"station\", accessor: \"station\", width: \"45%\", align: \"left\" },\r\n      { Header: \"supervisors\", accessor: \"supervisors\", align: \"left\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"size\", accessor: \"size\", align: \"center\" },\r\n      { Header: \"coordinates\", accessor: \"coordinates\", align: \"center\" },\r\n      { Header: \"action\", accessor: \"action\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    totalStations,\r\n    numOfPages,\r\n    totalHives,\r\n    stationSizeCount,\r\n    isGettingStations,\r\n    refetch,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport stationTableData from \"./data/stationTableData\";\r\nimport { changePage } from \"features/stations/stationSlice\";\r\nimport { resetValues } from \"features/stations/stationSlice\";\r\nimport StationSearchModal from \"components copy/searchModals/StationSearchModal\";\r\nimport { useSingleStation } from \"features/stations/stationsThunk\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport { useDashDetails_1 } from \"hooks/DashDetails\";\r\nimport { useCreateStation } from \"features/stations/stationsThunk\";\r\nimport { useUpdateStation } from \"features/stations/stationsThunk\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { Icon } from \"@mui/material\";\r\nfunction Stations() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    totalStations,\r\n    totalHives,\r\n    isGettingStations,\r\n    refetch,\r\n  } = stationTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  const {\r\n    pages,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    status,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    sort,\r\n  } = useSelector((store) => store.stations);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    status,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Stations</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalStations}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdatestation/add\">\r\n                      <AddIcon sx={{ fill: \"white\" }} fontSize=\"medium\" titleAccess=\"add station\" />\r\n                    </Link>\r\n                    <StationSearchModal isGettingStations={isGettingStations} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Stations;\r\n\r\nexport function SingleStation() {\r\n  const { id } = useParams();\r\n  const {\r\n    isGettingSingleStation,\r\n    singleStation: {\r\n      station: {\r\n        honey_harvests = [],\r\n        last_inspection_date,\r\n        latitude,\r\n        location,\r\n        longitude,\r\n        next_inspection_date,\r\n        notes,\r\n        number_of_hive_boxes,\r\n        station_id,\r\n        station_maintainace_history,\r\n        station_name,\r\n        station_size,\r\n        status,\r\n        supervisor_ext,\r\n        supervisor_int,\r\n      } = {},\r\n    } = {},\r\n    refetch,\r\n  } = useSingleStation(id);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image: LogoAsana, station_name, location }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/stations\">\r\n            {\" \"}\r\n            <Icon title=\"back to stations\" fontSize=\"large\">\r\n              business\r\n            </Icon>\r\n          </Link>\r\n          <Link to=\"/harvests\">\r\n            <Icon title=\"back to harvests\" fontSize=\"large\">\r\n              emoji_nature\r\n            </Icon>\r\n          </Link>\r\n          <Grid className={styling.wrapper} container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  station_id,\r\n                  station_Name: station_name,\r\n                  location,\r\n                  station_size,\r\n                  status,\r\n                  hive_boxes: number_of_hive_boxes,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  longitude: Number(longitude)?.toFixed(2) || \"N/A\",\r\n                  latitude: Number(latitude)?.toFixed(2) || \"N/A\",\r\n\r\n                  internal_supervisor: (\r\n                    <Link to={`/employees/${supervisor_int}`}>{supervisor_int}</Link>\r\n                  ),\r\n                  external_supervisor: (\r\n                    <Link to={`/employees/${supervisor_ext}`}>{supervisor_ext}</Link>\r\n                  ),\r\n                  last_inspection: last_inspection_date\r\n                    ? moment(last_inspection_date).format(\"YYYY-MM-DD\")\r\n                    : \"N/A\",\r\n                  next_inspection: next_inspection_date\r\n                    ? moment(next_inspection_date).format(\"YYYY-MM-DD\")\r\n                    : \"N/A\",\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  maintaince: station_maintainace_history,\r\n                  notes,\r\n                  ...(honey_harvests.length > 0 && {\r\n                    honey_harvests: honey_harvests\r\n                      .map(\r\n                        (\r\n                          { harvest_year, harvest_date, quantity_collected, unit, quality_rating },\r\n                          index\r\n                        ) =>\r\n                          `Harvest ${\r\n                            index + 1\r\n                          }: Year: ${harvest_year}, Date: ${harvest_date}, Quantity: ${quantity_collected} ${unit}, Rating: ${quality_rating}/5`\r\n                      )\r\n                      .join(\" | \"), // Join them as a single string with a separator like \" | \" or \"\\n\"\r\n                  }),\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport const CreateUpdateStation = () => {\r\n  const { id } = useParams();\r\n  const { station_details } = useDashDetails_1();\r\n  const { createStation, isCreatingStation } = useCreateStation();\r\n  const { updateStation, isUpdatingStation } = useUpdateStation();\r\n  const {\r\n    isEdit,\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n    pages,\r\n  } = useSelector((store) => store.stations);\r\n  const stationDetails = {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    notes,\r\n  };\r\n\r\n  const stationdetailsOnEdit = {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Conditionally include inspection dates in the validation check if isEdit is true\r\n    const detailsToValidate = isEdit ? stationdetailsOnEdit : stationDetails;\r\n\r\n    const isValid = Object.values(detailsToValidate).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields,especially the dates field if available.\");\r\n      return;\r\n    }\r\n\r\n    if (isEdit) {\r\n      return updateStation({ stationdetailsOnEdit, id });\r\n    }\r\n\r\n    createStation(stationDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}> */}\r\n          {/* <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to=\"/stations\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>{isEdit ? `Update ${station_name} details` : \"Create Station\"} </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {station_details\r\n                .filter((detail) => {\r\n                  if (\r\n                    detail.name === \"sort\" ||\r\n                    (!isEdit &&\r\n                      (detail.name === \"next_inspection_date\" ||\r\n                        detail.name === \"last_inspection_date\"))\r\n                  ) {\r\n                    return false; // Exclude these fields in edit mode\r\n                  }\r\n                  return true; // Include all other fields\r\n                })\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingStation === \"pending\" || isUpdatingStation === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} /> */}\r\n          {/* </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["style","position","bgcolor","boxShadow","p","StationSearchModal","_ref","isGettingStations","open","setOpen","React","handleClose","_jsxs","className","styles","wrapper","children","_jsx","SearchIcon","fontSize","onClick","handleOpen","sx","cursor","fill","title","Modal","onClose","Box","background","box","Typography","id","variant","component","CloseIcon","SearchStations","_ref2","searchStations","useDashDetails_1","dispatch","useDispatch","paper","map","input","name","TextField","CustomButton","backgroundhover","height","resetQuery","resetValues","type","width","fontWeight","Loader1","color","station_name","supervisor_int","supervisor_ext","location","longitude","latitude","station_size","number_of_hive_boxes","status","station_maintainace_history","last_inspection_date","next_inspection_date","notes","sort","useSelector","store","stations","getInput","e","value","target","numericFields","processedValue","includes","Number","handelChange","getDob","formattedDate","convertToDateOnly","toISOString","handleDob","date","station_details","UserInput","handleChange","GenderInput","gender","MultiLineInput","DateRegister","onChange","filter","detail","useEquipments","tool_name","category","quantity","storage_location","supplier","purchase_date","purchase_cost","currency","last_maintanace_date","next_maintanace_date","retired","note","equipments","handleDate","handleChangeEquip","equipmentDetails","searchEquipments","useSuppliesInputs","supply_name","minimum_stock_level","supplies","handleChangeSupp","suppliesDetails","handleDateSupp","searchSupplies","useProductsInputs","product_name","product_type","description","total_in_stock","unit","harvest_year","packaging_type","price","priceRangePP","products","handleChangeProducts","productDetails","handleDateProducts","RangeSlider","min","max","step","Header","info","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","MDBox","mb","display","alignItems","minHeight","borderRadius","backgroundImage","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","lineHeight","MDTypography","defaultProps","stationTableData","Stations","count","totalStations","numOfPages","totalHives","stationSizeCount","refetch","useStations","Author","station_id","ml","Link","to","Job","textAlign","Coord","_ref3","columns","accessor","align","rows","station","i","_Number","_Number2","payload","LogoAsana","supervisors","MDBadge","badgeContent","coordinates","toFixed","action","setUpdateStation","pages","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","inner","AddIcon","titleAccess","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","event","preventDefault","changePage","Footer","SingleStation","useParams","isGettingSingleStation","singleStation","honey_harvests","useSingleStation","Icon","styling","md","xl","Divider","orientation","mr","ProfileInfoCard","station_Name","hive_boxes","internal_supervisor","external_supervisor","last_inspection","moment","format","next_inspection","maintaince","length","index","harvest_date","quantity_collected","quality_rating","join","CreateUpdateStation","createStation","isCreatingStation","useCreateStation","updateStation","isUpdatingStation","useUpdateStation","isEdit","stationDetails","stationdetailsOnEdit","ArrowBackIcon","form","onSubmit","detailsToValidate","Object","every","undefined","alert"],"sourceRoot":""}