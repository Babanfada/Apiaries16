{"version":3,"file":"static/js/844.b8bcd370.chunk.js","mappings":"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","sources":["components copy/searchModals/StationSearchModal.jsx","hooks/DashDetails.jsx","layouts/reports/profile/components/Header/index.js","layouts/reports/data/reportTableData.js","layouts/reports/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/stations/stationSlice\";\r\nimport { useDashDetails_1 } from \"../../hooks/DashDetails\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport styles from \"../../layouts/styles/modal.module.scss\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function StationSearchModal({ isGettingStations }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <SearchIcon\r\n          fontSize=\"medium\"\r\n          onClick={handleOpen}\r\n          sx={{ cursor: \"pointer\", fill: \"white\" }}\r\n          title=\"search\"\r\n        />\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, background: \"white\" }} className={styles.box}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Search Stations <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which station you looking for?</p>\r\n          <SearchStations handleClose={handleClose} isGettingStations={isGettingStations} />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchStations = ({ handleClose, isGettingStations }) => {\r\n  const { searchStations } = useDashDetails_1();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n    // refetch();\r\n  };\r\n\r\n  return (\r\n    <form className={styles.paper}>\r\n      {searchStations.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingStations === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nStationSearchModal.propTypes = {\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n\r\nSearchStations.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport { handelChange, handleDob } from \"../features/stations/stationSlice\";\r\nimport { handleDate, handleChangeEquip } from \"../features/equuipments/equipmentSlice\";\r\nimport { convertToDateOnly } from \"../utils\";\r\nimport {\r\n  DateRegister,\r\n  GenderInput,\r\n  MultiLineInput,\r\n  RangeSlider,\r\n  UserInput,\r\n} from \"../components copy\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { handleChangeSupp, handleDateSupp } from \"../features/supplies/suppliesSlice\";\r\nimport { handleDateProducts } from \"features/products/productsSlice\";\r\nimport { handleChangeProducts } from \"features/products/productsSlice\";\r\n\r\nexport const useDashDetails_1 = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    station_name,\r\n    supervisor_int,\r\n    supervisor_ext,\r\n    location,\r\n    longitude,\r\n    latitude,\r\n    station_size,\r\n    number_of_hive_boxes,\r\n    status,\r\n    station_maintainace_history,\r\n    last_inspection_date,\r\n    next_inspection_date,\r\n    notes,\r\n    sort,\r\n  } = useSelector((store) => store.stations);\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\r\n      \"supervisor_int\",\r\n      \"supervisor_ext\",\r\n      \"longitude\",\r\n      \"latitude\",\r\n      \"number_of_hive_boxes\",\r\n    ];\r\n\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (\r\n      numericFields.includes(name) &&\r\n      ![\"longitude\", \"latitude\"].includes(name) &&\r\n      processedValue < 1\r\n    ) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handelChange({ name, value: processedValue }));\r\n  };\r\n\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDob({ name, date: formattedDate }));\r\n  };\r\n  const station_details = [\r\n    {\r\n      name: \"station_name\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"station_name\"}\r\n          value={station_name}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supervisor_int\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"supervisor_int\"}\r\n          value={supervisor_int}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supervisor_ext\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"supervisor_ext\"}\r\n          value={supervisor_ext}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"location\",\r\n      TextField: (\r\n        <UserInput name={\"location\"} value={location} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"longitude\",\r\n      TextField: (\r\n        <UserInput name={\"longitude\"} value={longitude} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"latitude\",\r\n      TextField: (\r\n        <UserInput name={\"latitude\"} value={latitude} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"station_size\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"station_size\"}\r\n          value={station_size}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"small\", \"medium\", \"large\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"number_of_hive_boxes\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"number_of_hive_boxes\"}\r\n          value={number_of_hive_boxes}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"active\", \"inactive\", \"terminated\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"station_maintainace_history\",\r\n      TextField: (\r\n        <MultiLineInput\r\n          name={\"station_maintainace_history\"}\r\n          value={station_maintainace_history}\r\n          type={\"text\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"last_inspection_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"last_inspection_date\"}\r\n          value={last_inspection_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"next_inspection_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"next_inspection_date\"}\r\n          value={next_inspection_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"notes\",\r\n      TextField: (\r\n        <MultiLineInput name={\"notes\"} value={notes} type={\"text\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"A-Z\", \"Z-A\", \"high-low\", \"low-high\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchStations = station_details.filter((detail) =>\r\n    [\r\n      \"station_name\",\r\n      \"location\",\r\n      \"station_size\",\r\n      \"status\",\r\n      \"supervisor_int\",\r\n      \"supervisor_ext\",\r\n      \"number_of_hive_boxes\",\r\n      \"sort\",\r\n      //   \"last_inspection_date\",\r\n      //   \"next_inspection_date\",\r\n    ].includes(detail.name)\r\n  );\r\n  return { station_details, searchStations };\r\n};\r\n\r\nexport const useEquipments = () => {\r\n  const {\r\n    tool_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    purchase_date,\r\n    purchase_cost,\r\n    currency,\r\n    last_maintanace_date,\r\n    next_maintanace_date,\r\n    retired,\r\n    note,\r\n    sort,\r\n  } = useSelector((store) => store.equipments);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDate({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\"quantity\", \"purchase_cost\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n\r\n    dispatch(handleChangeEquip({ name, value: processedValue }));\r\n  };\r\n  const equipmentDetails = [\r\n    {\r\n      name: \"tool_name\",\r\n      TextField: (\r\n        <UserInput name={\"tool_name\"} value={tool_name} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_cost\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"purchase_cost\"}\r\n          value={purchase_cost}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supplier\",\r\n      TextField: (\r\n        <UserInput name={\"supplier\"} value={supplier} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"currency\",\r\n      TextField: (\r\n        <UserInput name={\"currency\"} value={currency} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"category\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"category\"}\r\n          value={category}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"beekeping\", \"carpentary\", \"processing\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"retired\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"retired\"}\r\n          value={retired}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"retired\", \"not retired\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"used\", \"new\", \"need repair\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"storage_location\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"storage_location\"}\r\n          value={storage_location}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"warehouse\", \"apiary site\", \"factory\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_date\",\r\n      TextField: <DateRegister name={\"purchase_date\"} value={purchase_date} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"last_maintanace_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"last_maintanace_date\"}\r\n          value={last_maintanace_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"next_maintanace_date\",\r\n      TextField: (\r\n        <DateRegister\r\n          name={\"next_maintanace_date\"}\r\n          value={next_maintanace_date}\r\n          onChange={getDob}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"note\",\r\n      TextField: (\r\n        <MultiLineInput name={\"note\"} value={note} type={\"text\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"high-purchase-cost\", \"low-purchase-cost\", \"A-Z\", \"Z-A\", \"recent\", \"old\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchEquipments = equipmentDetails.filter((detail) =>\r\n    [\r\n      \"tool_name\",\r\n      \"category\",\r\n      \"status\",\r\n      \"storage_location\",\r\n      \"supplier\",\r\n      \"currency\",\r\n      \"retired\",\r\n      \"quantity\",\r\n      \"purchase_cost\",\r\n      \"purchase_date\",\r\n      \"sort\",\r\n    ].includes(detail.name)\r\n  );\r\n\r\n  return { equipmentDetails, searchEquipments };\r\n};\r\n\r\nexport const useSuppliesInputs = () => {\r\n  const {\r\n    supply_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    minimum_stock_level,\r\n    purchase_date,\r\n    purchase_cost,\r\n    sort,\r\n  } = useSelector((store) => store.supplies);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDateSupp({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    const numericFields = [\"quantity\", \"purchase_cost\", \" minimum_stock_level\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handleChangeSupp({ name, value: processedValue }));\r\n  };\r\n  const suppliesDetails = [\r\n    {\r\n      name: \"supply_name\",\r\n      TextField: (\r\n        <UserInput name={\"supply_name\"} value={supply_name} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"category\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"category\"}\r\n          value={category}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"processing\", \"packaging\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"status\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"status\"}\r\n          value={status}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"used\", \"new\", \"need repair\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"storage_location\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"storage_location\"}\r\n          value={storage_location}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"warehouse\", \"factory\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"supplier\",\r\n      TextField: (\r\n        <UserInput name={\"supplier\"} value={supplier} type={\"name\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_cost\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"purchase_cost\"}\r\n          value={purchase_cost}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"purchase_date\",\r\n      TextField: <DateRegister name={\"purchase_date\"} value={purchase_date} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"minimum_stock_level\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"minimum_stock_level\"}\r\n          value={minimum_stock_level}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"high-low\", \"low-high\", \"high-stock\", \"low-stock\", \"recent\", \"old\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  const searchSupplies = suppliesDetails.filter((detail) =>\r\n    [\r\n      \"supply_name\",\r\n      \"category\",\r\n      \"quantity\",\r\n      \"status\",\r\n      \"storage_location\",\r\n      \"supplier\",\r\n      \"purchase_cost\",\r\n      \"purchase_date\",\r\n    ].includes(detail.name)\r\n  );\r\n  return { suppliesDetails, searchSupplies };\r\n};\r\nexport const useProductsInputs = () => {\r\n  const {\r\n    sort,\r\n    product_name,\r\n    product_type,\r\n    description,\r\n    quantity,\r\n    total_in_stock,\r\n    unit,\r\n    harvest_year,\r\n    packaging_type,\r\n    // available,\r\n    price,\r\n    priceRangePP,\r\n  } = useSelector((store) => store.products);\r\n  const dispatch = useDispatch();\r\n  const getDob = (e) => {\r\n    const { name, value } = e.target;\r\n    const formattedDate = convertToDateOnly(value.toISOString());\r\n    dispatch(handleDateProducts({ name, date: formattedDate }));\r\n  };\r\n  const getInput = (e) => {\r\n    const { name, value } = e.target;\r\n    // console.log(name, value);\r\n    const numericFields = [\"quantity\", \"price\", \"total_in_stock\"];\r\n    let processedValue = numericFields.includes(name) ? Number(value) : value;\r\n    if (numericFields.includes(name) && processedValue < 1) {\r\n      processedValue = 1;\r\n    }\r\n    dispatch(handleChangeProducts({ name, value: processedValue }));\r\n  };\r\n  const productDetails = [\r\n    {\r\n      name: \"product_name\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"product_name\"}\r\n          value={product_name}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"product_type\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"product_type\"}\r\n          value={product_type}\r\n          type={\"text\"}\r\n          gender={[\"---\", \"honey\", \"wax\", \"propolis\", \"royal jelly\", \"venom\"]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"description\",\r\n      TextField: (\r\n        <MultiLineInput\r\n          name={\"description\"}\r\n          value={description}\r\n          type={\"text\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"quantity\",\r\n      TextField: (\r\n        <UserInput name={\"quantity\"} value={quantity} type={\"number\"} handleChange={getInput} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"total_in_stock\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"total_in_stock\"}\r\n          value={total_in_stock}\r\n          type={\"number\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"unit\",\r\n      TextField: <UserInput name={\"unit\"} value={unit} type={\"name\"} handleChange={getInput} />,\r\n    },\r\n    {\r\n      name: \"harvest_year\",\r\n      TextField: <DateRegister name={\"harvest_year\"} value={harvest_year} onChange={getDob} />,\r\n    },\r\n    {\r\n      name: \"packaging_type\",\r\n      TextField: (\r\n        <UserInput\r\n          name={\"packaging_type\"}\r\n          value={packaging_type}\r\n          type={\"name\"}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n    // {\r\n    //   name: \"available\",\r\n    //   TextField: (\r\n    //     <GenderInput\r\n    //       name={\"available\"}\r\n    //       value={available}\r\n    //       type={\"text\"}\r\n    //       gender={[\"---\", \"available\", \"not available\"]}\r\n    //       handleChange={getInput}\r\n    //     />\r\n    //   ),\r\n    // },\r\n    {\r\n      name: \"price\",\r\n      TextField: <UserInput name={\"price\"} value={price} type={\"number\"} handleChange={getInput} />,\r\n    },\r\n    {\r\n      name: \"priceRangePP\",\r\n      TextField: (\r\n        <RangeSlider name={\"priceRangePP\"} value={priceRangePP} min={1000} max={100000} step={2000} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"sort\",\r\n      TextField: (\r\n        <GenderInput\r\n          name={\"sort\"}\r\n          value={sort}\r\n          type={\"text\"}\r\n          gender={[\r\n            \"---\",\r\n            \"high-low\",\r\n            \"low-high\",\r\n            \"high-rating\",\r\n            \"low-rating\",\r\n            \"high-review\",\r\n            \"low-review\",\r\n            \"high-sell\",\r\n            \"low-sell\",\r\n          ]}\r\n          handleChange={getInput}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  // const searchSupplies = productDetails.filter((detail) =>\r\n  //   [\r\n  //     \"supply_name\",\r\n  //     \"category\",\r\n  //     \"quantity\",\r\n  //     \"status\",\r\n  //     \"storage_location\",\r\n  //     \"supplier\",\r\n  //     \"purchase_cost\",\r\n  //     \"purchase_date\",\r\n  //   ].includes(detail.name)\r\n  // );\r\n  return { productDetails };\r\n};\r\n","/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", station_name, location } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {station_name}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {location}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    station_name: \"First Name\",\r\n    location: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    station_name: PropTypes.string,\r\n    location: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport React from \"react\";\r\n// import { useStations } from \"features/stations/stationsThunk\";\r\n// import { setUpdateStation } from \"features/stations/stationSlice\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport { useReports } from \"features/catch_reports/reportsThunk\";\r\nimport { useDeleteReport } from \"features/catch_reports/reportsThunk\";\r\nimport { setUpdateReport } from \"features/catch_reports/reportSlice\";\r\nexport default function reportTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deleteReport } = useDeleteReport();\r\n  const {\r\n    isGettingAllReports,\r\n    catch_reports: {\r\n      reports = [],\r\n      totalReports = 0,\r\n      count = 0,\r\n      numOfPages = 0,\r\n      totalboxesAssigned = 0,\r\n      totalColonized = 0,\r\n      totalUnColonized = 0,\r\n    },\r\n    refetch,\r\n  } = useReports();\r\n  const Author = ({ image, season, location, report_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} season={season} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`#`}>{`${report_id} ${season}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{location}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {`colonized: ${title}`}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{`uncolonized: ${description}`}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Job2 = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {`date assigned: ${title}`}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{`catch date: ${description}`}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`/hunters/${title}`}>hunter {title}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`/employees/${description}`}>supervisor {description}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = reports.map((report, i) => {\r\n    const {\r\n      report_id,\r\n      hunter_id,\r\n      assigned_supervisor,\r\n      total_boxes_assigned,\r\n      colonized_boxes,\r\n      uncolonized_boxes,\r\n      delivered_to_apiary,\r\n      date_assigned,\r\n      catch_date,\r\n      catch_location,\r\n      catch_status,\r\n      season,\r\n      notes,\r\n    } = report;\r\n    const payload = {\r\n      report_id,\r\n      hunter_id,\r\n      assigned_supervisor,\r\n      total_boxes_assigned,\r\n      colonized_boxes,\r\n      uncolonized_boxes,\r\n      delivered_to_apiary,\r\n      date_assigned,\r\n      catch_date,\r\n      catch_location,\r\n      catch_status,\r\n      season,\r\n      notes,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateReport(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a report records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteReport(report_id);\r\n    };\r\n    return {\r\n      report: (\r\n        <Author image={LogoAsana} season={season} location={catch_location} report_id={report_id} />\r\n      ),\r\n      details: <Coord title={hunter_id} description={assigned_supervisor} />,\r\n      assigned_boxes: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {total_boxes_assigned}\r\n        </MDTypography>\r\n      ),\r\n      colonization: <Job title={colonized_boxes} description={uncolonized_boxes} />,\r\n      catch_stats: <Job2 title={date_assigned} description={catch_date} />,\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={catch_status}\r\n            color={\r\n              catch_status === \"all successfull\"\r\n                ? \"success\"\r\n                : catch_status === \"some pending\"\r\n                ? \"error\"\r\n                : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      installed_at_apiary: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={catch_status}\r\n            color={\r\n              catch_status === \"all\" ? \"success\" : catch_status === \"some\" ? \"error\" : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      note: (\r\n        <MDTypography\r\n          title={notes}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {notes.length > 20 ? `${notes.slice(0, 20)}...` : notes}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatereport/${report_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"report\", accessor: \"report\", width: \"45%\", align: \"left\" },\r\n      { Header: \"details\", accessor: \"details\", align: \"left\" },\r\n      { Header: \"asseigned_boxes\", accessor: \"asseigned_boxes\", align: \"center\" },\r\n      { Header: \"colonization\", accessor: \"colonization\", align: \"center\" },\r\n      { Header: \"catch_stats\", accessor: \"catch_stats\", align: \"center\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"installed_at_apiary\", accessor: \"installed_at_apiary\", align: \"center\" },\r\n      { Header: \"note\", accessor: \"note\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    numOfPages,\r\n    refetch,\r\n    isGettingAllReports,\r\n    totalReports,\r\n    totalboxesAssigned,\r\n    totalColonized,\r\n    totalUnColonized,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\n// import stationTableData from \"./data/reportTableData\";\r\n// import { changePage } from \"features/stations/stationSlice\";\r\n// import { resetValues } from \"features/stations/stationSlice\";\r\nimport StationSearchModal from \"components copy/searchModals/StationSearchModal\";\r\n// import { useSingleStation } from \"features/stations/stationsThunk\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport reportTableData from \"./data/reportTableData\";\r\nimport { ReportSearchModal } from \"components copy\";\r\nimport { useCatchReports } from \"hooks/DashDetails_2\";\r\nimport { useUpdateReport } from \"features/catch_reports/reportsThunk\";\r\nimport { useCreateReport } from \"features/catch_reports/reportsThunk\";\r\nimport { resetValues } from \"features/catch_reports/reportSlice\";\r\nimport { changePage } from \"features/catch_reports/reportSlice\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { Icon } from \"@mui/material\";\r\nfunction Reports() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    isGettingAllReports,\r\n    totalReports,\r\n    totalboxesAssigned,\r\n    totalColonized,\r\n    totalUnColonized,\r\n  } = reportTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  const {\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    catch_date,\r\n    catch_status,\r\n    season,\r\n    sort,\r\n    pages,\r\n  } = useSelector((store) => store.reports);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    catch_date,\r\n    catch_status,\r\n    season,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Harvest Reports</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalReports}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdatereport/add\">\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add a new report\"\r\n                      />\r\n                    </Link>\r\n                    <ReportSearchModal isGettingAllReports={isGettingAllReports} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Reports;\r\n\r\nexport const CreateUpdateReport = () => {\r\n  const { id } = useParams();\r\n  const { reportInputs } = useCatchReports();\r\n  const { isUpdatingReport, updateReport } = useUpdateReport();\r\n  const { createReport, isCreatingReport } = useCreateReport();\r\n  const {\r\n    hunter_id,\r\n    assigned_supervisor,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    delivered_to_apiary,\r\n    date_assigned,\r\n    catch_date,\r\n    catch_location,\r\n    catch_status,\r\n    season,\r\n    notes,\r\n    isEdit,\r\n  } = useSelector((store) => store.reports);\r\n  const reportDetails = {\r\n    hunter_id,\r\n    assigned_supervisor,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    delivered_to_apiary,\r\n    date_assigned,\r\n    catch_date,\r\n    catch_location,\r\n    catch_status,\r\n    season,\r\n    notes,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(reportDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateReport({ reportDetails, id });\r\n    createReport(reportDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        {isEdit ? (\r\n          <Link to=\"/stations\">\r\n            <Icon title=\"back to stations\" fontSize=\"large\">\r\n              business\r\n            </Icon>\r\n          </Link>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to={`/reports`}>\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>{isEdit ? `Update report details` : \"Create a new Report\"} </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {reportInputs\r\n                .filter((detail) => detail.name !== \"sort\")\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingReport === \"pending\" || isUpdatingReport === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["style","position","bgcolor","boxShadow","p","StationSearchModal","_ref","isGettingStations","open","setOpen","React","handleClose","_jsxs","className","styles","wrapper","children","_jsx","SearchIcon","fontSize","onClick","handleOpen","sx","cursor","fill","title","Modal","onClose","Box","background","box","Typography","id","variant","component","CloseIcon","SearchStations","_ref2","searchStations","useDashDetails_1","dispatch","useDispatch","paper","map","input","name","TextField","CustomButton","backgroundhover","height","resetQuery","resetValues","type","width","fontWeight","Loader1","color","station_name","supervisor_int","supervisor_ext","location","longitude","latitude","station_size","number_of_hive_boxes","status","station_maintainace_history","last_inspection_date","next_inspection_date","notes","sort","useSelector","store","stations","getInput","e","value","target","numericFields","processedValue","includes","Number","handelChange","getDob","formattedDate","convertToDateOnly","toISOString","handleDob","date","station_details","UserInput","handleChange","GenderInput","gender","MultiLineInput","DateRegister","onChange","filter","detail","useEquipments","tool_name","category","quantity","storage_location","supplier","purchase_date","purchase_cost","currency","last_maintanace_date","next_maintanace_date","retired","note","equipments","handleDate","handleChangeEquip","equipmentDetails","searchEquipments","useSuppliesInputs","supply_name","minimum_stock_level","supplies","handleChangeSupp","suppliesDetails","handleDateSupp","searchSupplies","useProductsInputs","product_name","product_type","description","total_in_stock","unit","harvest_year","packaging_type","price","priceRangePP","products","handleChangeProducts","productDetails","handleDateProducts","RangeSlider","min","max","step","Header","info","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","MDBox","mb","display","alignItems","minHeight","borderRadius","backgroundImage","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","lineHeight","MDTypography","defaultProps","reportTableData","deleteReport","useDeleteReport","isGettingAllReports","catch_reports","reports","totalReports","count","numOfPages","totalboxesAssigned","totalColonized","totalUnColonized","refetch","useReports","Author","season","report_id","ml","Link","to","Job","textAlign","Job2","_ref3","Coord","_ref4","columns","accessor","align","rows","report","i","hunter_id","assigned_supervisor","total_boxes_assigned","colonized_boxes","uncolonized_boxes","delivered_to_apiary","date_assigned","catch_date","catch_location","catch_status","payload","LogoAsana","details","assigned_boxes","href","colonization","catch_stats","MDBadge","badgeContent","installed_at_apiary","length","slice","update","setUpdateReport","remove","confirm","pages","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","inner","AddIcon","titleAccess","ReportSearchModal","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","event","preventDefault","changePage","Footer","CreateUpdateReport","useParams","reportInputs","useCatchReports","isUpdatingReport","updateReport","useUpdateReport","createReport","isCreatingReport","useCreateReport","isEdit","reportDetails","Icon","styling","ArrowBackIcon","form","onSubmit","Object","every","undefined","alert"],"sourceRoot":""}