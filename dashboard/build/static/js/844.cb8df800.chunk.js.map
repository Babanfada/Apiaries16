{"version":3,"file":"static/js/844.cb8df800.chunk.js","mappings":"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","sources":["components copy/searchModals/StationSearchModal.jsx","layouts/reports/profile/components/Header/index.js","layouts/reports/data/reportTableData.js","layouts/reports/index.js"],"sourcesContent":["import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\n// import styles from \"../../styles/components/deliveryaddressmodal.module.scss\";\r\n// import styles from \"../../\"\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/stations/stationSlice\";\r\nimport { useDashDetails_1 } from \"../../hooks/DashDetails\";\r\n// import { resetValues } from \"../../features/employees/employeesSlice\";\r\n// import { useThemeContext } from \"../../hooks/ThemeContext\";\r\n// import QueryOrder from \"../QueryOrder\";\r\n// import QueryProduct from \"./QueryProduct\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function StationSearchModal({ isGettingStations }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <BiSort onClick={handleOpen} title=\"filter\" />\r\n        {/* <button onClick={handleOpen} title=\"filter\">\r\n          search\r\n        </button> */}\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box\r\n        //   sx={{ ...style, background: isDarkMode ? \"black\" : \"white\" }}\r\n        //   className={styles.box}\r\n        >\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Filter{\" \"}\r\n            <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which of your products are you looking for?</p>\r\n          <SearchStations\r\n            handleClose={handleClose}\r\n            isGettingStations={isGettingStations}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchStations = ({ handleClose, isGettingStations }) => {\r\n  const { searchStations } = useDashDetails_1();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n    // refetch();\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      {searchStations.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        // background={\"#3457bf\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingStations === \"pending\" ? (\r\n          <Loader1 color=\"success\" />\r\n        ) : (\r\n          \"Find Out\"\r\n        )}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nStationSearchModal.propTypes = {\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n\r\nSearchStations.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingStations: PropTypes.string.isRequired,\r\n};\r\n","/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", station_name, location } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {station_name}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {location}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    station_name: \"First Name\",\r\n    location: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    station_name: PropTypes.string,\r\n    location: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport React from \"react\";\r\n// import { useStations } from \"features/stations/stationsThunk\";\r\n// import { setUpdateStation } from \"features/stations/stationSlice\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport { useReports } from \"features/catch_reports/reportsThunk\";\r\nimport { useDeleteReport } from \"features/catch_reports/reportsThunk\";\r\nimport { setUpdateReport } from \"features/catch_reports/reportSlice\";\r\nexport default function reportTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deleteReport } = useDeleteReport();\r\n  const {\r\n    isGettingAllReports,\r\n    catch_reports: {\r\n      reports = [],\r\n      totalReports = 0,\r\n      count = 0,\r\n      numOfPages = 0,\r\n      totalboxesAssigned = 0,\r\n      totalColonized = 0,\r\n      totalUnColonized = 0,\r\n    },\r\n    refetch,\r\n  } = useReports();\r\n  const Author = ({ image, season, location, report_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} season={season} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`#`}>{`${report_id} ${season}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{location}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {`colonized: ${title}`}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{`uncolonized: ${description}`}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Job2 = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {`date assigned: ${title}`}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{`catch date: ${description}`}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`/hunters/${title}`}>hunter {title}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`/employees/${description}`}>supervisor {description}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = reports.map((report, i) => {\r\n    const {\r\n      report_id,\r\n      hunter_id,\r\n      assigned_supervisor,\r\n      total_boxes_assigned,\r\n      colonized_boxes,\r\n      uncolonized_boxes,\r\n      delivered_to_apiary,\r\n      date_assigned,\r\n      catch_date,\r\n      catch_location,\r\n      catch_status,\r\n      season,\r\n      notes,\r\n    } = report;\r\n    const payload = {\r\n      report_id,\r\n      hunter_id,\r\n      assigned_supervisor,\r\n      total_boxes_assigned,\r\n      colonized_boxes,\r\n      uncolonized_boxes,\r\n      delivered_to_apiary,\r\n      date_assigned,\r\n      catch_date,\r\n      catch_location,\r\n      catch_status,\r\n      season,\r\n      notes,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateReport(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a report records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteReport(report_id);\r\n    };\r\n    return {\r\n      report: (\r\n        <Author image={LogoAsana} season={season} location={catch_location} report_id={report_id} />\r\n      ),\r\n      details: <Coord title={hunter_id} description={assigned_supervisor} />,\r\n      assigned_boxes: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {total_boxes_assigned}\r\n        </MDTypography>\r\n      ),\r\n      colonization: <Job title={colonized_boxes} description={uncolonized_boxes} />,\r\n      catch_stats: <Job2 title={date_assigned} description={catch_date} />,\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={catch_status}\r\n            color={\r\n              catch_status === \"all successfull\"\r\n                ? \"success\"\r\n                : catch_status === \"some pending\"\r\n                ? \"error\"\r\n                : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      installed_at_apiary: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={catch_status}\r\n            color={\r\n              catch_status === \"all\" ? \"success\" : catch_status === \"some\" ? \"error\" : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      note: (\r\n        <MDTypography\r\n          title={notes}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {notes.length > 20 ? `${notes.slice(0, 20)}...` : notes}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatereport/${report_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"report\", accessor: \"report\", width: \"45%\", align: \"left\" },\r\n      { Header: \"details\", accessor: \"details\", align: \"left\" },\r\n      { Header: \"asseigned_boxes\", accessor: \"asseigned_boxes\", align: \"center\" },\r\n      { Header: \"colonization\", accessor: \"colonization\", align: \"center\" },\r\n      { Header: \"catch_stats\", accessor: \"catch_stats\", align: \"center\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"installed_at_apiary\", accessor: \"installed_at_apiary\", align: \"center\" },\r\n      { Header: \"note\", accessor: \"note\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    numOfPages,\r\n    refetch,\r\n    isGettingAllReports,\r\n    totalReports,\r\n    totalboxesAssigned,\r\n    totalColonized,\r\n    totalUnColonized,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\n// import stationTableData from \"./data/reportTableData\";\r\n// import { changePage } from \"features/stations/stationSlice\";\r\n// import { resetValues } from \"features/stations/stationSlice\";\r\nimport StationSearchModal from \"components copy/searchModals/StationSearchModal\";\r\n// import { useSingleStation } from \"features/stations/stationsThunk\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport reportTableData from \"./data/reportTableData\";\r\nimport { ReportSearchModal } from \"components copy\";\r\nimport { useCatchReports } from \"hooks/DashDetails_2\";\r\nimport { useUpdateReport } from \"features/catch_reports/reportsThunk\";\r\nimport { useCreateReport } from \"features/catch_reports/reportsThunk\";\r\nimport { resetValues } from \"features/catch_reports/reportSlice\";\r\nimport { changePage } from \"features/catch_reports/reportSlice\";\r\n// import { useDashDetails_1 } from \"hooks/DashDetails\";\r\n// import { useCreateStation } from \"features/stations/stationsThunk\";\r\n// import { useUpdateStation } from \"features/stations/stationsThunk\";\r\nfunction Reports() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    isGettingAllReports,\r\n    totalReports,\r\n    totalboxesAssigned,\r\n    totalColonized,\r\n    totalUnColonized,\r\n  } = reportTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  const {\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    catch_date,\r\n    catch_status,\r\n    season,\r\n    sort,\r\n    pages,\r\n  } = useSelector((store) => store.reports);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    catch_date,\r\n    catch_status,\r\n    season,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography variant=\"h6\" color=\"white\">\r\n                  Reports\r\n                  {count}/{totalReports}\r\n                  <Link onClick={() => dispatch(resetValues())} to=\"/createupdatereport/add\">\r\n                    create report\r\n                  </Link>\r\n                  <ReportSearchModal isGettingAllReports={isGettingAllReports} />\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Reports;\r\n\r\n\r\nexport const CreateUpdateReport = () => {\r\n  const { id } = useParams();\r\n  const { reportInputs } = useCatchReports();\r\n  const { isUpdatingReport, updateReport } = useUpdateReport();\r\n  const { createReport, isCreatingReport } = useCreateReport();\r\n  const {\r\n    hunter_id,\r\n    assigned_supervisor,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    delivered_to_apiary,\r\n    date_assigned,\r\n    catch_date,\r\n    catch_location,\r\n    catch_status,\r\n    season,\r\n    notes,\r\n    isEdit,\r\n  } = useSelector((store) => store.reports);\r\n  const reportDetails = {\r\n    hunter_id,\r\n    assigned_supervisor,\r\n    total_boxes_assigned,\r\n    colonized_boxes,\r\n    uncolonized_boxes,\r\n    delivered_to_apiary,\r\n    date_assigned,\r\n    catch_date,\r\n    catch_location,\r\n    catch_status,\r\n    season,\r\n    notes,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(reportDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateReport({ reportDetails, id });\r\n    createReport(reportDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Link to=\"/stations\"> back to stations</Link>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n            <div>\r\n              <Link to={`/admin/catchreports`}>Go back</Link>\r\n\r\n              <form onSubmit={handleSubmit}>\r\n                {reportInputs\r\n                  .filter((detail) => detail.name !== \"sort\")\r\n                  .map((detail) => {\r\n                    const { name, TextField } = detail;\r\n                    return <div key={name}>{TextField}</div>;\r\n                  })}\r\n                <CustomButton\r\n                  background={\"#1212121F\"}\r\n                  backgroundhover={\"#59d9d9\"}\r\n                  size={\"100%\"}\r\n                  height={\"3vh\"}\r\n                  type=\"submit\"\r\n                  // disabled={!isValid}\r\n                >\r\n                  {isCreatingReport === \"pending\" || isUpdatingReport === \"pending\" ? (\r\n                    <Loader1 />\r\n                  ) : isEdit ? (\r\n                    \"Update\"\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </CustomButton>\r\n              </form>\r\n            </div>\r\n            <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["StationSearchModal","_ref","isGettingStations","open","setOpen","React","handleClose","_jsxs","children","_jsx","BiSort","onClick","handleOpen","title","Modal","onClose","Box","Typography","id","variant","component","CloseIcon","style","cursor","SearchStations","_ref2","searchStations","useDashDetails_1","dispatch","useDispatch","map","input","name","TextField","CustomButton","background","backgroundhover","height","resetQuery","resetValues","type","width","fontWeight","Loader1","color","Header","info","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","station_name","location","MDBox","position","mb","display","alignItems","minHeight","borderRadius","sx","backgroundImage","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","lineHeight","MDTypography","defaultProps","reportTableData","deleteReport","useDeleteReport","isGettingAllReports","catch_reports","reports","totalReports","count","numOfPages","totalboxesAssigned","totalColonized","totalUnColonized","refetch","useReports","Author","season","report_id","ml","Link","to","Job","description","textAlign","Job2","_ref3","Coord","_ref4","columns","accessor","align","rows","report","i","hunter_id","assigned_supervisor","total_boxes_assigned","colonized_boxes","uncolonized_boxes","delivered_to_apiary","date_assigned","catch_date","catch_location","catch_status","notes","payload","LogoAsana","details","assigned_boxes","href","colonization","catch_stats","status","MDBadge","badgeContent","installed_at_apiary","note","length","slice","update","setUpdateReport","remove","confirm","sort","pages","useSelector","store","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","ReportSearchModal","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","CreateUpdateReport","useParams","reportInputs","useCatchReports","isUpdatingReport","updateReport","useUpdateReport","createReport","isCreatingReport","useCreateReport","isEdit","reportDetails","md","xl","Divider","orientation","mr","onSubmit","e","Object","every","undefined","alert","filter","detail"],"sourceRoot":""}