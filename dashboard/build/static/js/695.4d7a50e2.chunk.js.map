{"version":3,"file":"static/js/695.4d7a50e2.chunk.js","mappings":"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","sources":["layouts/tables/profile/components/Header/index.js","components copy/searchModals/EmployeeSearchModal.jsx","layouts/tables/index.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", first_name, last_name, role } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {`${first_name} ${last_name}`}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {role}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    first_name: \"First Name\",\r\n    last_name: \"Last Name\",\r\n    role: \"Role\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    first_name: PropTypes.string,\r\n    last_name: PropTypes.string,\r\n    role: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\n// import styles from \"../../styles/components/deliveryaddressmodal.module.scss\";\r\n// import styles from \"../../\"\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import  { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/employees/employeesSlice\";\r\nimport { useEmployee } from \"hooks/Register\";\r\n// import { useThemeContext } from \"../../hooks/ThemeContext\";\r\n// import QueryOrder from \"../QueryOrder\";\r\n// import QueryProduct from \"./QueryProduct\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function EmployeeSearchModal({ isGettingAllEmployees }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <BiSort onClick={handleOpen} title=\"filter\" />\r\n        {/* <button onClick={handleOpen} title=\"filter\">\r\n          search\r\n        </button> */}\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box\r\n        //   sx={{ ...style, background: isDarkMode ? \"black\" : \"white\" }}\r\n        //   className={styles.box}\r\n        >\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Filter <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which of your products are you looking for?</p>\r\n          <SearchEmployees\r\n            handleClose={handleClose}\r\n            isGettingAllEmployees={isGettingAllEmployees}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchEmployees = ({ handleClose, isGettingAllEmployees }) => {\r\n  const { searchEmployees } = useEmployee();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      {searchEmployees.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        // background={\"#3457bf\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingAllEmployees === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nEmployeeSearchModal.propTypes = {\r\n  isGettingAllEmployees: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n\r\nSearchEmployees.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingAllEmployees: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\nimport employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\nimport { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useEmployee } from \"hooks/Register\";\r\nimport { useCreateEmployee } from \"features/employees/employeesThunk\";\r\nimport { useUpdateEmployee } from \"features/employees/employeesThunk\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { InputFileUpload } from \"components copy\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport { handleReset } from \"features/employees/employeesSlice\";\r\nimport EmployeeSearchModal from \"components copy/searchModals/EmployeeSearchModal\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport { changePage } from \"features/employees/employeesSlice\";\r\n\r\nfunction Empoloyees() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    totalEmployees,\r\n    count,\r\n    salaryData,\r\n    newHires,\r\n    newHiresCount,\r\n    employeesGenderCount,\r\n    departmentCount,\r\n    employmentStatusCount,\r\n    employmentTypeCount,\r\n    isGettingAllEmployees,\r\n    pages,\r\n  } = employeesTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography variant=\"h6\" color=\"white\">\r\n                  Employees {count}/{totalEmployees}\r\n                  <Link\r\n                    onClick={() => dispatch(handleReset())}\r\n                    to=\"/admin/createupdateemployees/add\"\r\n                  >\r\n                    create emp\r\n                  </Link>\r\n                  <EmployeeSearchModal isGettingAllEmployees={isGettingAllEmployees} />\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Empoloyees;\r\n\r\nexport function SingleEmployee() {\r\n  const { id } = useParams();\r\n  const { isGettingSingleEmployee, singleemployee, refetch } = useSingleEmployee(id);\r\n  const { employee } = singleemployee || {};\r\n  const {\r\n    catch_reports = [],\r\n    employee_nok = {},\r\n    externallySupervising = [],\r\n    internallySupervising = [],\r\n    swarm_hunters = [],\r\n    emp_id,\r\n    first_name,\r\n    last_name,\r\n    gender,\r\n    email,\r\n    dob,\r\n    phone,\r\n    image,\r\n    role,\r\n    address,\r\n    department,\r\n    employment_type,\r\n    employment_status,\r\n    salary,\r\n    joining_date,\r\n    skill,\r\n    notes,\r\n  } = employee ?? {};\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n  // console.log(\r\n  //   catch_reports,\r\n  //   employee_nok,\r\n  //   externallySupervising,\r\n  //   internallySupervising,\r\n  //   swarm_hunters\r\n  // );\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image, first_name, last_name, role }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/employees\">Go back</Link>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  emp_id,\r\n                  fullName: `${first_name} ${last_name}`,\r\n                  mobile: `${phone}`,\r\n                  address,\r\n                  employment_type,\r\n                  gender,\r\n                  department,\r\n                  employment_status,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  salary,\r\n                  joining_date,\r\n                  dob,\r\n                  email,\r\n                  skill,\r\n                  notes,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  ...(Object.keys(employee_nok).length > 0 && {\r\n                    nok: employee_nok.fullname,\r\n                    nok_id: employee_nok.nok_id,\r\n                  }),\r\n                  ...(externallySupervising.length > 0 && {\r\n                    [`supervised_station${externallySupervising.length > 0 ? \"s\" : \"\"}`]:\r\n                      externallySupervising.map((station) => station.station_id).join(\", \"),\r\n                  }),\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport function CreateUpdateEmployee() {\r\n  const { id } = useParams();\r\n  const { employeeDetails } = useEmployee();\r\n  // const dispatch = useDispatch();\r\n  const { createEmployee, isCreatingEmployee } = useCreateEmployee();\r\n  const { updateEmployee, isUpdatingEmployee } = useUpdateEmployee();\r\n\r\n  const {\r\n    email,\r\n    first_name,\r\n    last_name,\r\n    address,\r\n    phone,\r\n    gender,\r\n    role,\r\n    department,\r\n    dob,\r\n    joining_date,\r\n    salary,\r\n    skill,\r\n    notes,\r\n    employment_status,\r\n    employment_type,\r\n    isEdit,\r\n  } = useSelector((store) => store.employees);\r\n  const empDetails = {\r\n    email,\r\n    first_name,\r\n    last_name,\r\n    address: address.trim(),\r\n    phone,\r\n    gender,\r\n    role,\r\n    department,\r\n    dob,\r\n    joining_date,\r\n    salary,\r\n    skill,\r\n    notes: notes.trim(),\r\n    employment_status,\r\n    employment_type,\r\n  };\r\n  // const image = \"\";\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(empDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateEmployee({ empDetails, id });\r\n    createEmployee(empDetails);\r\n  };\r\n  const { uploadEmployeeImgs, isUploadingEmployeeImages } = useUploadEmployeeImages(id);\r\n\r\n  const uploadEmployeeAvatar = (e) => {\r\n    const file = e.target.files[0]; // Get the first file from the input\r\n    const formData = new FormData();\r\n    if (file) {\r\n      formData.append(\"image\", file); // Append only one file with key \"image\"\r\n      uploadEmployeeImgs(formData);\r\n      // console.log(file, formData);\r\n    } else {\r\n      alert(\"Please select a file to upload.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n            <div>\r\n              <Link to=\"/employees\">Go back</Link>\r\n              {isEdit ? (\r\n                <InputFileUpload\r\n                  name={\"image\"}\r\n                  handleChange={uploadEmployeeAvatar}\r\n                  uploading={isUploadingEmployeeImages}\r\n                />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              <form onSubmit={handleSubmit}>\r\n                {employeeDetails.map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n                <CustomButton\r\n                  background={\"#1212121F\"}\r\n                  backgroundhover={\"#59d9d9\"}\r\n                  size={\"100%\"}\r\n                  height={\"3vh\"}\r\n                  type=\"submit\"\r\n                  // disabled={!isValid}\r\n                >\r\n                  {isCreatingEmployee === \"pending\" || isUpdatingEmployee === \"pending\" ? (\r\n                    <Loader1 />\r\n                  ) : isEdit ? (\r\n                    \"Update\"\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </CustomButton>\r\n              </form>\r\n            </div>\r\n            <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","first_name","last_name","role","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","EmployeeSearchModal","isGettingAllEmployees","open","setOpen","React","handleClose","BiSort","onClick","handleOpen","title","Modal","onClose","Box","Typography","id","component","CloseIcon","style","cursor","SearchEmployees","searchEmployees","useEmployee","dispatch","useDispatch","map","input","name","TextField","CustomButton","background","backgroundhover","resetQuery","resetValues","type","width","Loader1","columns","rows","numOfPages","totalEmployees","count","salaryData","newHires","newHiresCount","employeesGenderCount","departmentCount","employmentStatusCount","employmentTypeCount","pages","employeesTableData","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","Link","handleReset","to","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","SingleEmployee","useParams","isGettingSingleEmployee","singleemployee","refetch","useSingleEmployee","employee","catch_reports","employee_nok","externallySupervising","internallySupervising","swarm_hunters","emp_id","gender","email","dob","phone","address","department","employment_type","employment_status","salary","joining_date","skill","notes","md","xl","Divider","orientation","ml","mr","ProfileInfoCard","description","fullName","mobile","Object","keys","length","nok","fullname","nok_id","station","station_id","join","CreateUpdateEmployee","employeeDetails","createEmployee","isCreatingEmployee","useCreateEmployee","updateEmployee","isUpdatingEmployee","useUpdateEmployee","isEdit","useSelector","store","employees","empDetails","trim","uploadEmployeeImgs","isUploadingEmployeeImages","useUploadEmployeeImages","InputFileUpload","e","file","target","files","formData","FormData","append","alert","uploading","onSubmit","every","undefined","detail"],"sourceRoot":""}