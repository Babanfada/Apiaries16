{"version":3,"file":"static/js/683.2cfd651d.chunk.js","mappings":"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","sources":["layouts/users/profile/components/Header/index.js","layouts/users/data/usersTableData.js","layouts/users/index.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image, fullname, address, role } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {fullname}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {address}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    fullname: \"First Name\",\r\n    address: \"Last Name\",\r\n    role: \"Role\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    fullname: PropTypes.string,\r\n    address: PropTypes.string,\r\n    role: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","import MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { usegetAllUser } from \"features/users/userThunk\";\r\n\r\nconst Author = ({ image, name, email, user_id }) => (\r\n  <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n    <MDAvatar src={image} name={name} size=\"sm\" />\r\n    <MDBox ml={2} lineHeight={1}>\r\n      <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n        <Link title=\"check details\" to={`/users/${user_id}`}>{`${user_id} ${name}`}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{email}</MDTypography>\r\n    </MDBox>\r\n  </MDBox>\r\n);\r\nconst Job = ({ title, description }) => (\r\n  <MDBox lineHeight={1} textAlign=\"left\">\r\n    <MDTypography\r\n      display=\"block\"\r\n      variant=\"caption\"\r\n      color={title === \"admin\" ? \"error\" : \"warning\"}\r\n      fontWeight=\"medium\"\r\n    >\r\n      {title}\r\n    </MDTypography>\r\n    <MDTypography variant=\"caption\">{description}</MDTypography>\r\n  </MDBox>\r\n);\r\nexport default function usersTableData() {\r\n  // const { isGettingSingleUser, singleuser, refetch: refetchSingleUser } = useSingleUser();\r\n  const { blacklistUser, blacklisting } = useBlacklistUser();\r\n  const { users, refetch, isGettingAllUser } = usegetAllUser();\r\n  const {\r\n    users: Users = [],\r\n    totalUsers = 0,\r\n    count = 0,\r\n    numOfPages = 1,\r\n    genderCount = [],\r\n    verificationCount = [],\r\n  } = users || {};\r\n\r\n  const rows = Users.map((user, i) => {\r\n    const {\r\n      user_id,\r\n      fullname,\r\n      email,\r\n      phone,\r\n      gender,\r\n      image,\r\n      role,\r\n      address,\r\n      emailNotification,\r\n      blacklisted,\r\n      isVerified,\r\n    } = user;\r\n    const handleActivation = () => {\r\n      const confirmation = window.confirm(\r\n        `You are about to ${blacklisted ? \"activate\" : \"blacklist\"} a user, ARE YOU SURE?`\r\n      );\r\n\r\n      if (!confirmation) return;\r\n\r\n      if (blacklisted) {\r\n        // If the user is blacklisted, activate them\r\n        blacklistUser({ user_id, blacklist: false, isValid: true });\r\n        console.log(\"User activated\");\r\n      } else {\r\n        // If the user is not blacklisted, deactivate them\r\n        blacklistUser({ user_id, blacklist: true, isValid: false });\r\n        console.log(\"User deactivated\");\r\n      }\r\n    };\r\n    return {\r\n      users: <Author image={image} name={`${fullname}`} email={email} user_id={user_id} />,\r\n      details: <Job title={role} description={address} />,\r\n      gender: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={gender}\r\n            color={gender === \"male\" ? \"success\" : \"primary\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      phone: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {phone}\r\n        </MDTypography>\r\n      ),\r\n      notification: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={emailNotification ? \"Disabled\" : \"Enabled\"}\r\n            color={emailNotification ? \"error\" : \"success\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      verified: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={isVerified ? \"Verified\" : \"Unverified\"}\r\n            color={isVerified ? \"success\" : \"warning\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      blacklisted: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={blacklisted ? \"Blacklisted\" : \"Active\"}\r\n            color={blacklisted ? \"error\" : \"success\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      action: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleActivation();\r\n            }}\r\n          >\r\n            {blacklisted ? \"Activate user\" : \"Blacklist user\"}\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      // stats: (\r\n      //   <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n      //     <Link to={`/users/${user_id}`}>check</Link>\r\n      //   </MDTypography>\r\n      // ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"users\", accessor: \"users\", width: \"45%\", align: \"left\" },\r\n      // { Header: \"role\", accessor: \"role\", align: \"center\" },\r\n      { Header: \"details\", accessor: \"details\", align: \"left\" },\r\n      { Header: \"gender\", accessor: \"gender\", align: \"center\" },\r\n      { Header: \"phone\", accessor: \"phone\", align: \"center\" },\r\n      { Header: \"notification\", accessor: \"notification\", align: \"center\" },\r\n      { Header: \"verified\", accessor: \"verified\", align: \"center\" },\r\n      { Header: \"blacklisted\", accessor: \"blacklisted\", align: \"center\" },\r\n      { Header: \"action\", accessor: \"action\", align: \"center\" },\r\n      // { Header: \"stats\", accessor: \"stats\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    totalUsers,\r\n    genderCount,\r\n    verificationCount,\r\n    refetch,\r\n    isGettingAllUser,\r\n    blacklisting,\r\n  };\r\n}\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { useSingleUser } from \"features/users/userThunk\";\r\nimport { useBlacklistUser } from \"features/users/userThunk\";\r\n\r\n// PropTypes validation for the Author component\r\nAuthor.propTypes = {\r\n  image: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  user_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n};\r\n\r\n// PropTypes validation for the Job component\r\nJob.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string,\r\n};\r\n\r\n// PropTypes validation for the rows array\r\nusersTableData.propTypes = {\r\n  rows: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      users: PropTypes.element.isRequired,\r\n      details: PropTypes.element.isRequired,\r\n      gender: PropTypes.element.isRequired,\r\n      phone: PropTypes.element.isRequired,\r\n      blacklisted: PropTypes.element.isRequired,\r\n      notification: PropTypes.element.isRequired,\r\n      verified: PropTypes.element.isRequired,\r\n      action: PropTypes.element.isRequired,\r\n    })\r\n  ).isRequired,\r\n  numOfPages: PropTypes.number.isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  totalUsers: PropTypes.number.isRequired,\r\n  genderCount: PropTypes.arrayOf(PropTypes.string),\r\n  verificationCount: PropTypes.arrayOf(PropTypes.string),\r\n  refetch: PropTypes.func.isRequired,\r\n  isGettingAllUser: PropTypes.bool.isRequired,\r\n};\r\n\r\n// export default usersTableData;\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\nimport employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\nimport { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\n// import { useEmployee } from \"hooks/Register\";\r\n// import { useCreateEmployee } from \"features/employees/employeesThunk\";\r\n// import { useUpdateEmployee } from \"features/employees/employeesThunk\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\n// import { InputFileUpload } from \"components copy\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\n// import { handleReset } from \"features/employees/employeesSlice\";\r\n// import EmployeeSearchModal from \"components copy/searchModals/EmployeeSearchModal\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\n// import { changePage } from \"features/employees/employeesSlice\";\r\nimport usersTableData from \"./data/usersTableData\";\r\nimport { changePage } from \"features/users/userSlice\";\r\nimport { UserSearchModal } from \"components copy\";\r\nimport { useSingleUser } from \"features/users/userThunk\";\r\n\r\nfunction Users() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    totalUsers,\r\n    genderCount,\r\n    verificationCount,\r\n    refetch,\r\n    isGettingAllUser,\r\n    blacklisting,\r\n  } = usersTableData();\r\n  const dispatch = useDispatch();\r\n  const {\r\n    gendersearch,\r\n    isVerified,\r\n    blacklisted,\r\n    subscribed,\r\n    sort,\r\n    pages,\r\n    email,\r\n    fullname,\r\n    phone,\r\n    gender,\r\n  } = useSelector((store) => store.users);\r\n\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    gendersearch,\r\n    isVerified,\r\n    blacklisted,\r\n    subscribed,\r\n    sort,\r\n    pages,\r\n    email,\r\n    fullname,\r\n    phone,\r\n    gender,\r\n    blacklisting,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography variant=\"h6\" color=\"white\">\r\n                  Users {count}/{totalUsers}\r\n                  <UserSearchModal isGettingAllUser={isGettingAllUser} />\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Users;\r\n\r\nexport function SingleUser() {\r\n  const { id } = useParams();\r\n  const { isGettingSingleUser, singleuser, refetch } = useSingleUser(id);\r\n  const { user, deliveryStatusCount = [], paymentStatusCount = [] } = singleuser || {};\r\n  const {\r\n    address,\r\n    blacklisted,\r\n    email,\r\n    emailNotification,\r\n    fullname,\r\n    gender,\r\n    image,\r\n    isVerified,\r\n    phone,\r\n    role,\r\n    user_id,\r\n  } = user ?? {};\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image, fullname, address, role }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/users\">Go back</Link>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  fullname,\r\n                  id: user_id,\r\n                  email,\r\n                  mobile: phone,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  address,\r\n                  gender,\r\n                  blacklisted: blacklisted ? \"YES\" : \"No\",\r\n                  Notification: emailNotification ? \"YES\" : \"No\",\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  Verified: isVerified ? \"YES\" : \"No\",\r\n                  ...(paymentStatusCount.length > 0 && {\r\n                    paymentStatusCount: paymentStatusCount\r\n                      .map(\r\n                        ({ paymentStatus, count }, index) =>\r\n                          `Order ${index + 1}: Status: ${paymentStatus}, Number: ${count}`\r\n                      )\r\n                      .join(\" | \"), // Join them as a single string with a separator like \" | \" or \"\\n\"\r\n                  }),\r\n                  ...(deliveryStatusCount.length > 0 && {\r\n                    deliveryStatusCount: deliveryStatusCount\r\n                      .map(\r\n                        ({ deliveryStatus, count }, index) =>\r\n                          `delivery ${index + 1}: Status: ${deliveryStatus}, Number: ${count}`\r\n                      )\r\n                      .join(\" | \"), // Join them as a single string with a separator like \" | \" or \"\\n\"\r\n                  }),\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","fullname","address","role","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","Author","name","email","user_id","ml","Link","title","to","Job","description","textAlign","usersTableData","blacklistUser","blacklisting","useBlacklistUser","users","refetch","isGettingAllUser","usegetAllUser","Users","totalUsers","count","numOfPages","genderCount","verificationCount","columns","accessor","width","align","rows","map","user","i","phone","gender","emailNotification","blacklisted","isVerified","details","MDBadge","badgeContent","component","href","notification","verified","action","onClick","confirm","blacklist","isValid","console","log","dispatch","useDispatch","gendersearch","subscribed","sort","pages","useSelector","store","React","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","UserSearchModal","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","SingleUser","id","useParams","isGettingSingleUser","singleuser","useSingleUser","deliveryStatusCount","paymentStatusCount","md","xl","Divider","orientation","mr","ProfileInfoCard","mobile","Notification","Verified","length","index","paymentStatus","join","deliveryStatus"],"sourceRoot":""}