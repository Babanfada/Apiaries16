{"version":3,"file":"static/js/366.ff87e64b.chunk.js","mappings":"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","sources":["layouts/hives/profile/components/Header/index.js","layouts/hives/data/hivesTableData.js","components copy/searchModals/HiveSearchModal.jsx","layouts/hives/index.js","../node_modules/.pnpm/@mui+icons-material@5.11.16_@mui+material@5.12.3_react@18.2.0/node_modules/@mui/icons-material/Add.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", hive_type, status } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {hive_type}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {status}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    hive_type: \"First Name\",\r\n    status: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    hive_type: PropTypes.string,\r\n    status: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport React from \"react\";\r\n// import { useStations } from \"features/stations/stationsThunk\";\r\n// import { setUpdateStation } from \"features/stations/stationSlice\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport { useHives } from \"features/hives/hivesThunk\";\r\nimport { useDeleteHive } from \"features/hives/hivesThunk\";\r\nimport { setUpdateHive } from \"features/hives/hiveSlice\";\r\n\r\nexport default function hivesTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deleteHive } = useDeleteHive();\r\n  const {\r\n    isGettingAllHives,\r\n    hives: {\r\n      hives = [],\r\n      totalHives = 0,\r\n      count = 0,\r\n      numOfPages = 0,\r\n      colonizationCount = [],\r\n      hiveCurrentLocationCount = [],\r\n      hiveStatusCount = [],\r\n      hiveTypeCount = [],\r\n      hiveUseConditionCount = [],\r\n    },\r\n    refetch,\r\n  } = useHives();\r\n  // console.log(pages);\r\n\r\n  const Author = ({ image, hive_type, location, hive_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} hive_type={hive_type} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          {/* {hive_type} */}\r\n          <Link to={`/hives/${hive_id}`}>{`${hive_id} ${hive_type}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{location}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`#`}>{`${title}`}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`#`}>{`${description}`}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {title}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{description}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = hives.map((hive, i) => {\r\n    const {\r\n      hive_id,\r\n      assigned_hunter,\r\n      hive_type,\r\n      num_of_frames,\r\n      colonized,\r\n      status,\r\n      use_condition,\r\n      first_installation,\r\n      current_location,\r\n      last_inspection_date,\r\n      note,\r\n    } = hive;\r\n    const payload = {\r\n      hive_id,\r\n      assigned_hunter,\r\n      hive_type,\r\n      num_of_frames,\r\n      colonized,\r\n      status,\r\n      use_condition,\r\n      first_installation,\r\n      current_location,\r\n      last_inspection_date,\r\n      note,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateHive(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a hives records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteHive(hive_id);\r\n    };\r\n    return {\r\n      hive: (\r\n        <Author\r\n          image={LogoAsana}\r\n          hive_type={hive_type}\r\n          location={current_location}\r\n          hive_id={hive_id}\r\n        />\r\n      ),\r\n      hunter: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link to={`/hunters/${assigned_hunter}`}>{assigned_hunter}</Link>\r\n        </MDTypography>\r\n      ),\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={status}\r\n            color={status === \"inuse\" ? \"success\" : status === \"unuse\" ? \"warning\" : \"error\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      colonized: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={colonized}\r\n            color={\r\n              colonized === \"confirmed\" ? \"success\" : colonized === \"pending\" ? \"warning\" : \"error\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      condition: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={use_condition}\r\n            color={\r\n              use_condition === \"new\" ? \"success\" : use_condition === \"used\" ? \"warning\" : \"error\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      management: (\r\n        <Coord\r\n          title={`installed_on: ${first_installation || \"N/A\"}`}\r\n          description={`inspected_on: ${last_inspection_date || \"N/A\"}`}\r\n        />\r\n      ),\r\n      frames: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {num_of_frames}\r\n        </MDTypography>\r\n      ),\r\n      note: (\r\n        <MDTypography\r\n          title={note}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {note.length > 20 ? `${note.slice(0, 20)}...` : note}\r\n        </MDTypography>\r\n      ),\r\n     \r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatehive/${hive_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"hive\", accessor: \"hive\", width: \"45%\", align: \"left\" },\r\n      { Header: \"hunter\", accessor: \"hunter\", align: \"left\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"colonized\", accessor: \"colonized\", align: \"center\" },\r\n      { Header: \"condition\", accessor: \"condition\", align: \"center\" },\r\n      { Header: \"management\", accessor: \"management\", align: \"center\" },\r\n      { Header: \"frames\", accessor: \"frames\", align: \"center\" },\r\n      { Header: \"note\", accessor: \"note\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    isGettingAllHives,\r\n    hives,\r\n    totalHives,\r\n    colonizationCount,\r\n    hiveCurrentLocationCount,\r\n    hiveStatusCount,\r\n    hiveTypeCount,\r\n    hiveUseConditionCount,\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport styles from \"../../layouts/styles/modal.module.scss\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHives } from \"../../hooks/DashDetails_2\";\r\nimport { resetValues } from \"../../features/hives/hiveSlice\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function HiveSearchModal({ isGettingAllHives }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <SearchIcon\r\n          fontSize=\"medium\"\r\n          onClick={handleOpen}\r\n          sx={{ cursor: \"pointer\", fill: \"white\" }}\r\n          title=\"search\"\r\n        />\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, background: \"white\" }} className={styles.box}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Search Hives <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which hive are you looking for?</p>\r\n          <SearchHive handleClose={handleClose} isGettingAllHives={isGettingAllHives} />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchHive = ({ handleClose, isGettingAllHives }) => {\r\n  const { hiveInputs } = useHives();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n  };\r\n\r\n  return (\r\n    <form className={styles.paper}>\r\n      {hiveInputs\r\n        .filter(\r\n          (detail) =>\r\n            detail.name !== \"last_inspection_date\" &&\r\n            detail.name !== \"note\" &&\r\n            detail.name !== \"assigned_hunter\"\r\n        )\r\n        .map((input) => {\r\n          const { name, TextField } = input;\r\n          return <div key={name}>{TextField}</div>;\r\n        })}\r\n\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingAllHives === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n// Add PropTypes for HiveSearchModal\r\nHiveSearchModal.propTypes = {\r\n  isGettingAllHives: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\r\n};\r\n\r\n// Add PropTypes for SearchHive\r\nSearchHive.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingAllHives: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\r\n};\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport hivesTableData from \"./data/hivesTableData\";\r\nimport { changePage } from \"features/hives/hiveSlice\";\r\nimport { resetValues } from \"features/hives/hiveSlice\";\r\nimport HiveSearchModal from \"components copy/searchModals/HiveSearchModal\";\r\nimport { useSingleHive } from \"features/hives/hivesThunk\";\r\nimport { useUpdateHive } from \"features/hives/hivesThunk\";\r\nimport { useCreateHive } from \"features/hives/hivesThunk\";\r\nimport { useHives } from \"hooks/DashDetails_2\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { Icon } from \"@mui/material\";\r\n\r\nfunction Hives() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    isGettingAllHives,\r\n    hives,\r\n    totalHives,\r\n    colonizationCount,\r\n    hiveCurrentLocationCount,\r\n    hiveStatusCount,\r\n    hiveTypeCount,\r\n    hiveUseConditionCount,\r\n  } = hivesTableData();\r\n  const dispatch = useDispatch();\r\n  const {\r\n    pages,\r\n    assigned_hunter,\r\n    hive_type,\r\n    num_of_frames,\r\n    colonized,\r\n    status,\r\n    use_condition,\r\n    first_installation,\r\n    current_location,\r\n    last_inspection_date,\r\n    note,\r\n    sort,\r\n  } = useSelector((store) => store.hives);\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    assigned_hunter,\r\n    hive_type,\r\n    num_of_frames,\r\n    colonized,\r\n    status,\r\n    use_condition,\r\n    first_installation,\r\n    current_location,\r\n    last_inspection_date,\r\n    note,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Hives</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalHives}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdatehive/add\">\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add a new hive\"\r\n                      />\r\n                    </Link>\r\n                    <HiveSearchModal isGettingAllHives={isGettingAllHives} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Hives;\r\n\r\nexport function SingleHive() {\r\n  const { id } = useParams();\r\n  const {\r\n    isGettingSingleHive,\r\n    singleHive: {\r\n      hive: {\r\n        hive_id,\r\n        assigned_hunter,\r\n        hive_type,\r\n        num_of_frames,\r\n        colonized,\r\n        status,\r\n        use_condition,\r\n        first_installation,\r\n        current_location,\r\n        last_inspection_date,\r\n        note,\r\n      } = {},\r\n    } = {},\r\n    refetch,\r\n  } = useSingleHive(id);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image: LogoAsana, hive_type, status }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/hives\">\r\n            <ArrowBackIcon />\r\n          </Link>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  hive_id,\r\n                  hunter: <Link to={`/hunters/${assigned_hunter}`}>{assigned_hunter}</Link>,\r\n                  hive_type,\r\n                  frames: num_of_frames,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  colonized,\r\n                  status,\r\n                  use_condition,\r\n                  first_installation,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  current_location,\r\n                  inspected_on: last_inspection_date\r\n                    ? moment(last_inspection_date).format(\"YYYY-MM-DD\")\r\n                    : \"N/A\",\r\n                  note,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\nexport const CreateUpdateHive = () => {\r\n  const { id } = useParams();\r\n  const { hiveInputs } = useHives();\r\n  const { isUpdatingHive, updateHive } = useUpdateHive();\r\n  const { createHive, isCreatingHive } = useCreateHive();\r\n  const {\r\n    assigned_hunter,\r\n    hive_type,\r\n    num_of_frames,\r\n    colonized,\r\n    status,\r\n    use_condition,\r\n    first_installation,\r\n    current_location,\r\n    last_inspection_date,\r\n    note,\r\n    isEdit,\r\n  } = useSelector((store) => store.hives);\r\n  const hiveDetails = {\r\n    assigned_hunter,\r\n    hive_type,\r\n    num_of_frames,\r\n    colonized,\r\n    status,\r\n    use_condition,\r\n    first_installation,\r\n    current_location,\r\n    last_inspection_date,\r\n    note,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(hiveDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateHive({ hiveDetails, id });\r\n    createHive(hiveDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to=\"/hives\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>\r\n                {isEdit\r\n                  ? `Update ${hive_type} details assignde to hunter ${assigned_hunter}`\r\n                  : \"Create a new Hive\"}{\" \"}\r\n              </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {hiveInputs\r\n                .filter((detail) => detail.name !== \"sort\")\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingHive === \"pending\" || isUpdatingHive === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","hive_type","status","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","hivesTableData","dispatch","useDispatch","deleteHive","useDeleteHive","isGettingAllHives","hives","totalHives","count","numOfPages","colonizationCount","hiveCurrentLocationCount","hiveStatusCount","hiveTypeCount","hiveUseConditionCount","refetch","useHives","Author","location","hive_id","ml","Link","to","Coord","_ref3","title","description","textAlign","columns","accessor","width","align","rows","map","hive","i","assigned_hunter","num_of_frames","colonized","use_condition","first_installation","current_location","last_inspection_date","note","payload","LogoAsana","hunter","component","href","MDBadge","badgeContent","condition","management","frames","length","slice","update","onClick","setUpdateHive","remove","confirm","style","bgcolor","boxShadow","p","HiveSearchModal","open","setOpen","React","handleClose","className","styles","wrapper","SearchIcon","fontSize","handleOpen","cursor","fill","Modal","onClose","Box","background","box","Typography","id","CloseIcon","SearchHive","hiveInputs","paper","filter","detail","name","input","TextField","CustomButton","backgroundhover","resetQuery","resetValues","type","Loader1","pages","sort","useSelector","store","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","inner","AddIcon","titleAccess","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","SingleHive","useParams","isGettingSingleHive","singleHive","useSingleHive","ArrowBackIcon","md","xl","Divider","orientation","mr","ProfileInfoCard","inspected_on","moment","format","CreateUpdateHive","isUpdatingHive","updateHive","useUpdateHive","createHive","isCreatingHive","useCreateHive","isEdit","hiveDetails","styling","form","onSubmit","e","Object","every","undefined","alert","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}