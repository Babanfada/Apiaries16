{"version":3,"file":"static/js/919.e8e03e15.chunk.js","mappings":"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","sources":["layouts/services/profile/components/Header/index.js","layouts/services/data/servicesTableData.js","components copy/searchModals/ServiceSearchModal.jsx","layouts/services/index.js","../node_modules/.pnpm/@mui+icons-material@5.11.16_@mui+material@5.12.3_react@18.2.0/node_modules/@mui/icons-material/Add.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", hive_type, status } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {hive_type}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {status}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    hive_type: \"First Name\",\r\n    status: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    hive_type: PropTypes.string,\r\n    status: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logoSlack from \"assets/images/small-logos/logo-slack.svg\";\r\nimport React from \"react\";\r\nimport { useServices } from \"features/services/servicesThunk\";\r\nimport { useDeleteService } from \"features/services/servicesThunk\";\r\nimport { setUpdateService } from \"features/services/serviceSlice\";\r\n\r\nexport default function servicesTableData() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    isGettingAllServices,\r\n    services: { service = [], totalServices = 0, count = 0, numOfPages = 0 },\r\n    refetch,\r\n  } = useServices();\r\n  const { deleteService } = useDeleteService();\r\n  const Author = ({ image, category, service_name, service_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} category={category} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          {`${service_id} ${category}`}\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{service_name}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  // const Job = ({ title, description }) => (\r\n  //   <MDBox lineHeight={1} textAlign=\"left\">\r\n  //     <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n  //       <Link to={`#`}>{`${title}`}</Link>\r\n  //     </MDTypography>\r\n  //     <MDTypography variant=\"caption\">\r\n  //       <Link to={`#`}>{`${description}`}</Link>\r\n  //     </MDTypography>\r\n  //   </MDBox>\r\n  // );\r\n  // const Coord = ({ title, description }) => (\r\n  //   <MDBox lineHeight={1} textAlign=\"left\">\r\n  //     <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n  //       {title}\r\n  //     </MDTypography>\r\n  //     <MDTypography variant=\"caption\">{description}</MDTypography>\r\n  //   </MDBox>\r\n  // );\r\n  const rows = service.map((serv, i) => {\r\n    const { service_id, service_name, description, numOfTimesRendered, category } = serv;\r\n    const payload = {\r\n      service_id,\r\n      service_name,\r\n      description,\r\n      numOfTimesRendered,\r\n      category,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateService(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a serv records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteService(service_id);\r\n    };\r\n    return {\r\n      service: (\r\n        <Author\r\n          image={logoSlack}\r\n          category={category}\r\n          service_name={service_name}\r\n          service_id={service_id}\r\n        />\r\n      ),\r\n\r\n      rendered: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {numOfTimesRendered}\r\n        </MDTypography>\r\n      ),\r\n      description: (\r\n        <MDTypography\r\n          title={description}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {description.length > 20 ? `${description.slice(0, 20)}...` : description}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdateservice/${service_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"service\", accessor: \"service\", width: \"45%\", align: \"left\" },\r\n      { Header: \"rendered\", accessor: \"rendered\", align: \"left\" },\r\n      { Header: \"description\", accessor: \"description\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    refetch,\r\n    count,\r\n    isGettingAllServices,\r\n    service,\r\n    totalServices,\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useServiceInputs } from \"../../hooks/ServicesDetails\";\r\nimport { resetValues } from \"../../features/services/serviceSlice\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport styles from \"../../layouts/styles/modal.module.scss\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function ServiceSearchModal({ isGettingAllServices }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <SearchIcon\r\n          fontSize=\"medium\"\r\n          onClick={handleOpen}\r\n          sx={{ cursor: \"pointer\", fill: \"white\" }}\r\n          title=\"search\"\r\n        />\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, background: \"white\" }} className={styles.box}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Search Services <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which serviceare you looking for?</p>\r\n          <SearchService handleClose={handleClose} isGettingAllServices={isGettingAllServices} />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchService = ({ handleClose, isGettingAllServices }) => {\r\n  const { serviceInputs } = useServiceInputs();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n  };\r\n\r\n  return (\r\n    <form className={styles.paper}>\r\n      {serviceInputs\r\n        .filter((detail) => detail.name !== \"description\")\r\n        .map((input) => {\r\n          const { name, TextField } = input;\r\n          return <div key={name}>{TextField}</div>;\r\n        })}\r\n\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        // background={\"#3457bf\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingAllServices === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nServiceSearchModal.propTypes = {\r\n  isGettingAllServices: PropTypes.string.isRequired,\r\n};\r\n\r\nSearchService.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingAllServices: PropTypes.string.isRequired,\r\n};\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport servicesTableData from \"./data/servicesTableData\";\r\nimport { changePage } from \"features/services/serviceSlice\";\r\nimport { resetValues } from \"features/services/serviceSlice\";\r\nimport ServiceSearchModal from \"components copy/searchModals/ServiceSearchModal\";\r\nimport { useServiceInputs } from \"hooks/ServicesDetails\";\r\nimport { useUpdateService } from \"features/services/servicesThunk\";\r\nimport { useCreateService } from \"features/services/servicesThunk\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nfunction Services() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    isGettingAllServices,\r\n    service,\r\n    totalServices,\r\n  } = servicesTableData();\r\n  const dispatch = useDispatch();\r\n\r\n  const { service_name, description, numOfTimesRendered, category, sort, pages } = useSelector(\r\n    (store) => store.services\r\n  );\r\n\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [service_name, description, numOfTimesRendered, category, sort, pages]);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Services</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalServices}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdateservice/add\">\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add a new service\"\r\n                      />\r\n                    </Link>\r\n                    <ServiceSearchModal isGettingAllServices={isGettingAllServices} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Services;\r\n\r\nexport const CreateUpdateService = () => {\r\n  const { id } = useParams();\r\n  const { serviceInputs } = useServiceInputs();\r\n  const { isUpdatingService, updateService } = useUpdateService();\r\n  const { createService, isCreatingService } = useCreateService();\r\n  const { service_name, description, numOfTimesRendered, category, isEdit } = useSelector(\r\n    (store) => store.services\r\n  );\r\n  const serviceDetails = {\r\n    service_name,\r\n    description,\r\n    numOfTimesRendered,\r\n    category,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(serviceDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateService({ serviceDetails, id });\r\n    createService(serviceDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to=\"/services\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>{isEdit ? `Update ${service_name} details` : \"Create a new Service\"} </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {serviceInputs\r\n                .filter((detail) => detail.name !== \"sort\")\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingService === \"pending\" || isUpdatingService === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>{\" \"}\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\nexports.default = _default;"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","hive_type","status","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","servicesTableData","dispatch","useDispatch","isGettingAllServices","services","service","totalServices","count","numOfPages","refetch","useServices","deleteService","useDeleteService","Author","category","service_name","service_id","ml","columns","accessor","width","align","rows","map","serv","i","description","numOfTimesRendered","payload","logoSlack","rendered","component","href","title","length","slice","update","Link","onClick","setUpdateService","to","remove","confirm","style","bgcolor","boxShadow","p","ServiceSearchModal","open","setOpen","React","handleClose","className","styles","wrapper","SearchIcon","fontSize","handleOpen","cursor","fill","Modal","onClose","Box","background","box","Typography","id","CloseIcon","SearchService","serviceInputs","useServiceInputs","paper","filter","detail","name","input","TextField","CustomButton","backgroundhover","resetQuery","resetValues","type","Loader1","sort","pages","useSelector","store","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","inner","AddIcon","titleAccess","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","CreateUpdateService","useParams","isUpdatingService","updateService","useUpdateService","createService","isCreatingService","useCreateService","isEdit","serviceDetails","styling","ArrowBackIcon","form","onSubmit","e","Object","every","undefined","alert","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}