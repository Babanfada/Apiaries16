{"version":3,"file":"static/js/330.1011fd74.chunk.js","mappings":"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","sources":["layouts/pollinations/profile/components/Header/index.js","layouts/pollinations/data/pollinationTableData.js","layouts/pollinations/index.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", hive_type, status } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {hive_type}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {status}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    hive_type: \"First Name\",\r\n    status: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    hive_type: PropTypes.string,\r\n    status: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","import MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logoSlack from \"assets/images/small-logos/logo-slack.svg\";\r\nimport React from \"react\";\r\nimport { usePolServices } from \"features/pollination/polservicesThunk\";\r\nimport { useDeletePolServices } from \"features/pollination/polservicesThunk\";\r\nimport { setUpdatePolServ } from \"features/pollination/polservicesSlice\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Author = ({ image, crop_type, pol_service_id }) => (\r\n  <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n    <MDAvatar src={image} size=\"sm\" />\r\n    <MDBox ml={2} lineHeight={1}>\r\n      <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n        {`${pol_service_id} `}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{crop_type}</MDTypography>\r\n    </MDBox>\r\n  </MDBox>\r\n);\r\n\r\nAuthor.propTypes = {\r\n  image: PropTypes.string.isRequired,\r\n  crop_type: PropTypes.string.isRequired,\r\n  pol_service_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n};\r\n\r\nexport default function pollinationTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deletePolService } = useDeletePolServices();\r\n  const {\r\n    isGettingAllPolServices,\r\n    polservices: { polservices = [], totalPolServices, count, numOfPages } = {},\r\n    refetch,\r\n  } = usePolServices();\r\n  // const Author = ({ image, crop_type, pol_service_id }) => (\r\n  //   <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n  //     <MDAvatar src={image} size=\"sm\" />\r\n  //     <MDBox ml={2} lineHeight={1}>\r\n  //       <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n  //         {`${pol_service_id} `}\r\n  //       </MDTypography>\r\n  //       <MDTypography variant=\"caption\">{crop_type}</MDTypography>\r\n  //     </MDBox>\r\n  //   </MDBox>\r\n  // );\r\n  // Author.propTypes = {\r\n  //   image: PropTypes.string.isRequired,\r\n  //   crop_type: PropTypes.string.isRequired,\r\n  //   pol_service_id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  // };\r\n  const rows = polservices.map((item, i) => {\r\n    const { pol_service_id, service_id, crop_type, service_description, rendered, price } = item;\r\n    const payload = {\r\n      service_id,\r\n      crop_type,\r\n      service_description,\r\n      rendered,\r\n      price,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdatePolServ(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a pollination service records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deletePolService(pol_service_id);\r\n    };\r\n    return {\r\n      pollination: (\r\n        <Author image={logoSlack} crop_type={crop_type} pol_service_id={pol_service_id} />\r\n      ),\r\n      service: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {service_id}\r\n        </MDTypography>\r\n      ),\r\n      description: (\r\n        <MDTypography\r\n          title={service_description}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {service_description.length > 20\r\n            ? `${service_description.slice(0, 20)}...`\r\n            : service_description}\r\n        </MDTypography>\r\n      ),\r\n      rendered: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          # {rendered}\r\n        </MDTypography>\r\n      ),\r\n      price: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          # {price}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdatepollination/${pol_service_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"pollination\", accessor: \"pollination\", width: \"45%\", align: \"left\" },\r\n      { Header: \"service\", accessor: \"service\", align: \"left\" },\r\n      { Header: \"description\", accessor: \"description\", align: \"center\" },\r\n      { Header: \"rendered\", accessor: \"rendered\", align: \"center\" },\r\n      { Header: \"price\", accessor: \"price\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    refetch,\r\n    count,\r\n    isGettingAllPolServices,\r\n    totalPolServices,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport { changePage } from \"features/pollination/polservicesSlice\";\r\nimport { resetValues } from \"features/pollination/polservicesSlice\";\r\nimport { usePolServiceInputs } from \"hooks/ServicesDetails\";\r\nimport { useUpdatePolServices } from \"features/pollination/polservicesThunk\";\r\nimport { useCreatePolServices } from \"features/pollination/polservicesThunk\";\r\nimport { PolServSearchModal } from \"components copy\";\r\nimport pollinationTableData from \"./data/pollinationTableData\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nfunction Pollination() {\r\n  const dispatch = useDispatch();\r\n  const { rows, numOfPages, refetch, count, isGettingAllPolServices, columns, totalPolServices } =\r\n    pollinationTableData();\r\n  const { sort, pages, priceRangeP, service_id, crop_type, service_description, rendered, price } =\r\n    useSelector((store) => store.polservices);\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [pages, service_id, crop_type, service_description, rendered, price, sort, priceRangeP]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Pollination</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalPolServices}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdatepollination/add\">\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add a new pollination service\"\r\n                      />\r\n                    </Link>\r\n                    <PolServSearchModal isGettingAllPolServices={isGettingAllPolServices} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Pollination;\r\n\r\nexport const CreateUpdatePollination = () => {\r\n  const { id } = useParams();\r\n  const { polServiceInputs } = usePolServiceInputs();\r\n  const { isUpdatingPolservices, updatePolService } = useUpdatePolServices();\r\n  const { createPolService, isCreatingPolservice } = useCreatePolServices();\r\n  const { service_id, crop_type, service_description, rendered, price, isEdit } = useSelector(\r\n    (store) => store.polservices\r\n  );\r\n  const polServiceDetails = {\r\n    service_id,\r\n    crop_type,\r\n    service_description,\r\n    rendered,\r\n    price,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(polServiceDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updatePolService({ polServiceDetails, id });\r\n    createPolService(polServiceDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to=\"/pollinations\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>\r\n                {isEdit\r\n                  ? `Update polination service ${service_id} details`\r\n                  : \"Create a new pollination service\"}{\" \"}\r\n              </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {polServiceInputs\r\n                .filter((detail) => detail.name !== \"sort\" && detail.name !== \"priceRangeP\")\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingPolservice === \"pending\" || isUpdatingPolservices === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","hive_type","status","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","Author","crop_type","pol_service_id","ml","pollinationTableData","dispatch","useDispatch","deletePolService","useDeletePolServices","isGettingAllPolServices","polservices","totalPolServices","count","numOfPages","refetch","usePolServices","columns","accessor","width","align","rows","map","i","service_id","service_description","rendered","price","payload","pollination","logoSlack","service","component","href","description","title","length","slice","update","Link","onClick","setUpdatePolServ","to","remove","confirm","sort","pages","priceRangeP","useSelector","store","React","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","className","styles","wrapper","inner","resetValues","AddIcon","fill","fontSize","titleAccess","PolServSearchModal","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","CreateUpdatePollination","id","useParams","polServiceInputs","usePolServiceInputs","isUpdatingPolservices","updatePolService","useUpdatePolServices","createPolService","isCreatingPolservice","useCreatePolServices","isEdit","polServiceDetails","styling","ArrowBackIcon","form","onSubmit","e","Object","every","undefined","alert","filter","detail","name","TextField","CustomButton","background","backgroundhover","type","Loader1"],"sourceRoot":""}