{"version":3,"file":"static/js/630.a4c8ae17.chunk.js","mappings":"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","sources":["layouts/provisions/profile/components/Header/index.js","layouts/provisions/data/provisionsTableData.js","layouts/provisions/index.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", hive_type, status } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {hive_type}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {status}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    hive_type: \"First Name\",\r\n    status: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    hive_type: PropTypes.string,\r\n    status: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport logoSlack from \"assets/images/small-logos/logo-slack.svg\";\r\nimport React from \"react\";\r\nimport { useSupplyProvision } from \"features/supplyProvision/supplyprovThunk\";\r\nimport { useDeleteProvision } from \"features/supplyProvision/supplyprovThunk\";\r\nimport { setUpdateProvision } from \"features/supplyProvision/supplyProvSlice\";\r\n\r\nexport default function provisionsTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deleteProvision } = useDeleteProvision();\r\n  const {\r\n    isGettingAllprovisions,\r\n    supplyProvision: { provisions = [], count = 0, numOfPages = 0, totalProvisions = 0 } = {},\r\n    refetch,\r\n  } = useSupplyProvision();\r\n  const Author = ({ image, item_name, item_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          {`${item_id} `}\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{item_name}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n\r\n  const rows = provisions.map((item, i) => {\r\n    const { item_id, service_id, item_name, description, quantity, price_NGN } = item;\r\n    const payload = {\r\n      service_id,\r\n      item_name,\r\n      description,\r\n      quantity,\r\n      price_NGN,\r\n    };\r\n\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateProvision(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete a provision records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteProvision(item_id);\r\n    };\r\n    return {\r\n      provisions: <Author image={logoSlack} item_name={item_name} item_id={item_id} />,\r\n      service: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {service_id}\r\n        </MDTypography>\r\n      ),\r\n      description: (\r\n        <MDTypography\r\n          title={description}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {description.length > 20 ? `${description.slice(0, 20)}...` : description}\r\n        </MDTypography>\r\n      ),\r\n      quantity: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          # {quantity}\r\n        </MDTypography>\r\n      ),\r\n      price: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          # {price_NGN}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdateprovision/${item_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography\r\n          component=\"a\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n          onClick={() => {\r\n            handleDelete();\r\n          }}\r\n        >\r\n          <Link>remove</Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"provisions\", accessor: \"provisions\", width: \"45%\", align: \"left\" },\r\n      { Header: \"service\", accessor: \"service\", align: \"left\" },\r\n      { Header: \"description\", accessor: \"description\", align: \"center\" },\r\n      { Header: \"quantity\", accessor: \"quantity\", align: \"center\" },\r\n      { Header: \"price\", accessor: \"price\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    refetch,\r\n    count,\r\n    isGettingAllprovisions,\r\n    totalProvisions,\r\n  };\r\n}\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport { changePage } from \"features/supplyProvision/supplyProvSlice\";\r\nimport { resetValues } from \"features/supplyProvision/supplyProvSlice\";\r\nimport { ProvisionSearchModal } from \"components copy\";\r\nimport provisionsTableData from \"./data/provisionsTableData\";\r\nimport { useProvisionInputs } from \"hooks/ServicesDetails\";\r\nimport { useUpdateProvision } from \"features/supplyProvision/supplyprovThunk\";\r\nimport { useCreateProvision } from \"features/supplyProvision/supplyprovThunk\";\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nfunction Provisions() {\r\n  const dispatch = useDispatch();\r\n  const { rows, numOfPages, refetch, count, columns, isGettingAllprovisions, totalProvisions } =\r\n    provisionsTableData();\r\n\r\n  const { item_id, item_name, description, quantity, price, sort, pages, priceRangeSP } =\r\n    useSelector((store) => store.provisions);\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [pages, item_id, item_name, description, quantity, price, sort, priceRangeSP]);\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\"> Provisions</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalProvisions}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link onClick={() => dispatch(resetValues())} to=\"/createupdateprovision/add\">\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add a new provision\"\r\n                      />\r\n                    </Link>\r\n                    <ProvisionSearchModal isGettingAllprovisions={isGettingAllprovisions} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Provisions;\r\n\r\nexport const CreateUpdateProvision = () => {\r\n  const { id } = useParams();\r\n  const { provisionInputs } = useProvisionInputs();\r\n  const { isUpdatingProvision, updateProvision } = useUpdateProvision();\r\n  const { createProvision, isCreatingProvision } = useCreateProvision();\r\n  const { service_id, item_name, description, quantity, price_NGN, isEdit } = useSelector(\r\n    (store) => store.provisions\r\n  );\r\n  const provisionDetails = {\r\n    service_id,\r\n    item_name,\r\n    description,\r\n    quantity,\r\n    price_NGN,\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(provisionDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateProvision({ provisionDetails, id });\r\n    createProvision(provisionDetails);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            {/* <Link to={`/provisions`}>Go back to provisions</Link> */}\r\n            <div>\r\n              <Link to=\"/provisions\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>{isEdit ? `Update item ${item_name}'s details` : \"Create Provision Item\"} </h6>\r\n              <div></div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {provisionInputs\r\n                .filter((detail) => detail.name !== \"sort\" && detail.name !== \"priceRangeSP\")\r\n                .map((detail) => {\r\n                  const { name, TextField } = detail;\r\n                  return <div key={name}>{TextField}</div>;\r\n                })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingProvision === \"pending\" || isUpdatingProvision === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","hive_type","status","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","provisionsTableData","dispatch","useDispatch","deleteProvision","useDeleteProvision","isGettingAllprovisions","supplyProvision","provisions","count","numOfPages","totalProvisions","refetch","useSupplyProvision","Author","item_name","item_id","ml","columns","accessor","width","align","rows","map","i","service_id","description","quantity","price_NGN","payload","logoSlack","service","component","href","title","length","slice","price","update","Link","onClick","setUpdateProvision","to","remove","confirm","sort","pages","priceRangeSP","useSelector","store","React","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","className","styles","wrapper","inner","resetValues","AddIcon","fill","fontSize","titleAccess","ProvisionSearchModal","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","CreateUpdateProvision","id","useParams","provisionInputs","useProvisionInputs","isUpdatingProvision","updateProvision","useUpdateProvision","createProvision","isCreatingProvision","useCreateProvision","isEdit","provisionDetails","styling","ArrowBackIcon","form","onSubmit","e","Object","every","undefined","alert","filter","detail","name","TextField","CustomButton","background","backgroundhover","type","Loader1"],"sourceRoot":""}