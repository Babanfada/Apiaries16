{"version":3,"file":"static/js/695.7a5a709e.chunk.js","mappings":"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","sources":["layouts/tables/data/employeesTableData.js","layouts/tables/profile/components/Header/index.js","components copy/searchModals/EmployeeSearchModal.jsx","layouts/tables/index.js"],"sourcesContent":["/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\nimport { useAllEmployess } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUpdateEmployee } from \"features/employees/employeesSlice\";\r\nimport React from \"react\";\r\n\r\nexport default function data() {\r\n  const { isGettingAllEmployees, employees, refetch } = useAllEmployess();\r\n  const {\r\n    employees: Employees = [],\r\n    numOfPages = 1,\r\n    totalEmployees = 0,\r\n    count = 0,\r\n    salaryData = [],\r\n    newHires = [],\r\n    newHiresCount = [],\r\n    employeesGenderCount = [],\r\n    departmentCount = [],\r\n    employmentStatusCount = [],\r\n    employmentTypeCount = [],\r\n  } = employees || {};\r\n  // console.log(Employees);\r\n  const Author = ({ image, name, email, emp_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} name={name} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`/employees/${emp_id}`}>{`${emp_id} ${name}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{email}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {title}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{description}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = Employees.map((employee, i) => {\r\n    const {\r\n      emp_id,\r\n      first_name,\r\n      last_name,\r\n      gender,\r\n      email,\r\n      dob,\r\n      phone,\r\n      image,\r\n      role,\r\n      address,\r\n      department,\r\n      employment_type,\r\n      employment_status,\r\n      salary,\r\n      joining_date,\r\n      skill,\r\n      notes,\r\n      // createdAt,\r\n      // updatedAt,\r\n    } = employee;\r\n    const payload = {\r\n      emp_id,\r\n      first_name,\r\n      last_name,\r\n      gender,\r\n      email,\r\n      dob,\r\n      phone,\r\n      role,\r\n      address,\r\n      department,\r\n      employment_type,\r\n      employment_status,\r\n      salary,\r\n      joining_date,\r\n      skill,\r\n      notes,\r\n    };\r\n    const dispatch = useDispatch();\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateEmployee(payload));\r\n    };\r\n    return {\r\n      employee: (\r\n        <Author image={image} name={`${first_name} ${last_name}`} email={email} emp_id={emp_id} />\r\n      ),\r\n      function: <Job title={role} description={department} />,\r\n      gender: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={gender}\r\n            color={gender === \"male\" ? \"success\" : \"primary\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      phone: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {phone}\r\n        </MDTypography>\r\n      ),\r\n      dob: (\r\n        <MDTypography component=\"a\" href=\"#\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {dob}\r\n        </MDTypography>\r\n      ),\r\n      action: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/admin/createupdateemployees/${emp_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  const {\r\n    first_name,\r\n    last_name,\r\n    employment_type,\r\n    employment_status,\r\n    dob,\r\n    joining_date,\r\n    role,\r\n    salaryRange,\r\n    pages,\r\n    sort,\r\n  } = useSelector((store) => store.employees);\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    first_name,\r\n    last_name,\r\n    employment_type,\r\n    employment_status,\r\n    dob,\r\n    joining_date,\r\n    role,\r\n    pages,\r\n    salaryRange,\r\n    sort,\r\n  ]);\r\n  return {\r\n    columns: [\r\n      { Header: \"employee\", accessor: \"employee\", width: \"45%\", align: \"left\" },\r\n      { Header: \"function\", accessor: \"function\", align: \"left\" },\r\n      { Header: \"gender\", accessor: \"gender\", align: \"center\" },\r\n      { Header: \"phone\", accessor: \"phone\", align: \"center\" },\r\n      { Header: \"dob\", accessor: \"dob\", align: \"center\" },\r\n      { Header: \"action\", accessor: \"action\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    totalEmployees,\r\n    count,\r\n    salaryData,\r\n    newHires,\r\n    newHiresCount,\r\n    employeesGenderCount,\r\n    departmentCount,\r\n    employmentStatusCount,\r\n    employmentTypeCount,\r\n    isGettingAllEmployees,\r\n    pages,\r\n  };\r\n}\r\n","/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", first_name, last_name, role } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {`${first_name} ${last_name}`}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {role}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    first_name: \"First Name\",\r\n    last_name: \"Last Name\",\r\n    role: \"Role\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    first_name: PropTypes.string,\r\n    last_name: PropTypes.string,\r\n    role: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Button } from \"@mui/material\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport styles from \"../../layouts/styles/modal.module.scss\";\r\n// import styles from \"../../\"\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import  { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { resetValues } from \"../../features/employees/employeesSlice\";\r\nimport { useEmployee } from \"hooks/Register\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function EmployeeSearchModal({ isGettingAllEmployees }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <div>\r\n        <SearchIcon\r\n          fontSize=\"medium\"\r\n          onClick={handleOpen}\r\n          sx={{ cursor: \"pointer\", fill: \"white\" }}\r\n          title=\"search\"\r\n        />\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, background: \"white\" }} className={styles.box}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Search Employees <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which Employee are you looking for?</p>\r\n          <SearchEmployees\r\n            handleClose={handleClose}\r\n            isGettingAllEmployees={isGettingAllEmployees}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchEmployees = ({ handleClose, isGettingAllEmployees }) => {\r\n  const { searchEmployees } = useEmployee();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n  };\r\n\r\n  return (\r\n    <form className={styles.paper}>\r\n      {searchEmployees.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"grey\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingAllEmployees === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\n\r\nEmployeeSearchModal.propTypes = {\r\n  isGettingAllEmployees: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n\r\nSearchEmployees.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingAllEmployees: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\nimport employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\nimport { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useEmployee } from \"hooks/Register\";\r\nimport { useCreateEmployee } from \"features/employees/employeesThunk\";\r\nimport { useUpdateEmployee } from \"features/employees/employeesThunk\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { InputFileUpload } from \"components copy\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport { handleReset } from \"features/employees/employeesSlice\";\r\nimport EmployeeSearchModal from \"components copy/searchModals/EmployeeSearchModal\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport { changePage } from \"features/employees/employeesSlice\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\n//style\r\nimport styles from \"../styles/thead.module.scss\";\r\nimport styling from \"../styles/createupdate.module.scss\";\r\nfunction Empoloyees() {\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    totalEmployees,\r\n    count,\r\n    salaryData,\r\n    newHires,\r\n    newHiresCount,\r\n    employeesGenderCount,\r\n    departmentCount,\r\n    employmentStatusCount,\r\n    employmentTypeCount,\r\n    isGettingAllEmployees,\r\n    pages,\r\n  } = employeesTableData();\r\n  const dispatch = useDispatch();\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography className={styles.wrapper} variant=\"h6\" color=\"white\">\r\n                  <MDBox className={styles.inner}>\r\n                    <MDTypography color=\"white\">Employees</MDTypography>\r\n                    <MDTypography color=\"white\">\r\n                      {count}/{totalEmployees}\r\n                    </MDTypography>\r\n                  </MDBox>\r\n                  <MDBox className={styles.inner}>\r\n                    <Link\r\n                      onClick={() => dispatch(handleReset())}\r\n                      to=\"/admin/createupdateemployees/add\"\r\n                    >\r\n                      <AddIcon\r\n                        sx={{ fill: \"white\" }}\r\n                        fontSize=\"medium\"\r\n                        titleAccess=\"add employee\"\r\n                      />\r\n                    </Link>\r\n                    <EmployeeSearchModal isGettingAllEmployees={isGettingAllEmployees} />\r\n                  </MDBox>\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Empoloyees;\r\n\r\nexport function SingleEmployee() {\r\n  const { id } = useParams();\r\n  const { isGettingSingleEmployee, singleemployee, refetch } = useSingleEmployee(id);\r\n  const { employee } = singleemployee || {};\r\n  const {\r\n    catch_reports = [],\r\n    employee_nok = {},\r\n    externallySupervising = [],\r\n    internallySupervising = [],\r\n    swarm_hunters = [],\r\n    emp_id,\r\n    first_name,\r\n    last_name,\r\n    gender,\r\n    email,\r\n    dob,\r\n    phone,\r\n    image,\r\n    role,\r\n    address,\r\n    department,\r\n    employment_type,\r\n    employment_status,\r\n    salary,\r\n    joining_date,\r\n    skill,\r\n    notes,\r\n  } = employee ?? {};\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [id]);\r\n  // console.log(\r\n  //   catch_reports,\r\n  //   employee_nok,\r\n  //   externallySupervising,\r\n  //   internallySupervising,\r\n  //   swarm_hunters\r\n  // );\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      <Header info={{ image, first_name, last_name, role }}>\r\n        <MDBox mt={5} mb={3}>\r\n          <Link to=\"/employees\">\r\n            {\" \"}\r\n            <ArrowBackIcon />\r\n          </Link>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  emp_id,\r\n                  fullName: `${first_name} ${last_name}`,\r\n                  mobile: `${phone}`,\r\n                  address,\r\n                  employment_type,\r\n                  gender,\r\n                  department,\r\n                  employment_status,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  salary,\r\n                  joining_date,\r\n                  dob,\r\n                  email,\r\n                  skill,\r\n                  notes,\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n              <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n              <ProfileInfoCard\r\n                title=\"\"\r\n                description=\"\"\r\n                info={{\r\n                  ...(Object.keys(employee_nok).length > 0 && {\r\n                    nok: employee_nok.fullname,\r\n                    nok_id: employee_nok.nok_id,\r\n                  }),\r\n                  ...(externallySupervising.length > 0 && {\r\n                    [`supervised_station${externallySupervising.length > 0 ? \"s\" : \"\"}`]:\r\n                      externallySupervising.map((station) => station.station_id).join(\", \"),\r\n                  }),\r\n                }}\r\n                shadow={false}\r\n              />\r\n              <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n            </Grid>\r\n          </Grid>\r\n        </MDBox>\r\n      </Header>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport function CreateUpdateEmployee() {\r\n  const { id } = useParams();\r\n  const { employeeDetails } = useEmployee();\r\n  // const dispatch = useDispatch();\r\n  const { createEmployee, isCreatingEmployee } = useCreateEmployee();\r\n  const { updateEmployee, isUpdatingEmployee } = useUpdateEmployee();\r\n\r\n  const {\r\n    email,\r\n    first_name,\r\n    last_name,\r\n    address,\r\n    phone,\r\n    gender,\r\n    role,\r\n    department,\r\n    dob,\r\n    joining_date,\r\n    salary,\r\n    skill,\r\n    notes,\r\n    employment_status,\r\n    employment_type,\r\n    isEdit,\r\n  } = useSelector((store) => store.employees);\r\n  const empDetails = {\r\n    email,\r\n    first_name,\r\n    last_name,\r\n    address: address.trim(),\r\n    phone,\r\n    gender,\r\n    role,\r\n    department,\r\n    dob,\r\n    joining_date,\r\n    salary,\r\n    skill,\r\n    notes: notes.trim(),\r\n    employment_status,\r\n    employment_type,\r\n  };\r\n  // const image = \"\";\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const isValid = Object.values(empDetails).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields.\");\r\n      return;\r\n    }\r\n    if (isEdit) return updateEmployee({ empDetails, id });\r\n    createEmployee(empDetails);\r\n  };\r\n  const { uploadEmployeeImgs, isUploadingEmployeeImages } = useUploadEmployeeImages(id);\r\n\r\n  const uploadEmployeeAvatar = (e) => {\r\n    const file = e.target.files[0]; // Get the first file from the input\r\n    const formData = new FormData();\r\n    if (file) {\r\n      formData.append(\"image\", file); // Append only one file with key \"image\"\r\n      uploadEmployeeImgs(formData);\r\n      // console.log(file, formData);\r\n    } else {\r\n      alert(\"Please select a file to upload.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox mb={2} />\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid className={styling.wrapper} container spacing={1}>\r\n          {/* <Grid className={styling.wrapper} item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}> */}\r\n          {/* <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} /> */}\r\n          <div>\r\n            <div>\r\n              <Link to=\"/employees\">\r\n                <ArrowBackIcon />\r\n              </Link>\r\n              <h6>{isEdit ? `Update ${first_name} ${last_name} details` : \"Create Employee\"} </h6>\r\n              <div>\r\n                {isEdit ? (\r\n                  <InputFileUpload\r\n                    name={\"avatar\"}\r\n                    handleChange={uploadEmployeeAvatar}\r\n                    uploading={isUploadingEmployeeImages}\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <form className={styling.form} onSubmit={handleSubmit}>\r\n              {employeeDetails.map((detail) => {\r\n                const { name, TextField } = detail;\r\n                return <div key={name}>{TextField}</div>;\r\n              })}\r\n              <CustomButton\r\n                background={\"inherit\"}\r\n                // background={\"#1212121F\"}\r\n                backgroundhover={\"grey\"}\r\n                size={\"100%\"}\r\n                height={\"3vh\"}\r\n                type=\"submit\"\r\n                // disabled={!isValid}\r\n              >\r\n                {isCreatingEmployee === \"pending\" || isUpdatingEmployee === \"pending\" ? (\r\n                  <Loader1 />\r\n                ) : isEdit ? (\r\n                  \"Update\"\r\n                ) : (\r\n                  \"Submit\"\r\n                )}\r\n              </CustomButton>\r\n            </form>\r\n          </div>\r\n          {/* <Divider orientation=\"vertical\" sx={{ mx: 0 }} /> */}\r\n          {/* </Grid> */}\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\n"],"names":["data","isGettingAllEmployees","employees","refetch","useAllEmployess","Employees","numOfPages","totalEmployees","count","salaryData","newHires","newHiresCount","employeesGenderCount","departmentCount","employmentStatusCount","employmentTypeCount","Author","_ref","image","name","email","emp_id","_jsxs","MDBox","display","alignItems","lineHeight","children","_jsx","MDAvatar","src","size","ml","MDTypography","variant","fontWeight","Link","to","Job","_ref2","title","description","textAlign","color","rows","map","employee","i","first_name","last_name","gender","dob","phone","role","address","department","employment_type","employment_status","salary","joining_date","skill","notes","payload","dispatch","useDispatch","function","MDBadge","badgeContent","component","href","action","onClick","setUpdateEmployee","salaryRange","pages","sort","useSelector","store","React","columns","Header","accessor","width","align","info","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","position","mb","minHeight","borderRadius","sx","backgroundImage","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","alt","shadow","height","defaultProps","style","bgcolor","boxShadow","p","EmployeeSearchModal","open","setOpen","handleClose","className","styles","wrapper","SearchIcon","fontSize","handleOpen","cursor","fill","Modal","onClose","Box","background","box","Typography","id","CloseIcon","SearchEmployees","searchEmployees","useEmployee","paper","input","TextField","CustomButton","backgroundhover","resetQuery","resetValues","type","Loader1","employeesTableData","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","inner","handleReset","AddIcon","titleAccess","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","SingleEmployee","useParams","isGettingSingleEmployee","singleemployee","useSingleEmployee","catch_reports","employee_nok","externallySupervising","internallySupervising","swarm_hunters","ArrowBackIcon","md","xl","Divider","orientation","mr","ProfileInfoCard","fullName","mobile","Object","keys","length","nok","fullname","nok_id","station","station_id","join","CreateUpdateEmployee","employeeDetails","createEmployee","isCreatingEmployee","useCreateEmployee","updateEmployee","isUpdatingEmployee","useUpdateEmployee","isEdit","empDetails","trim","uploadEmployeeImgs","isUploadingEmployeeImages","useUploadEmployeeImages","styling","InputFileUpload","e","file","target","files","formData","FormData","append","alert","uploading","form","onSubmit","every","undefined","detail"],"sourceRoot":""}