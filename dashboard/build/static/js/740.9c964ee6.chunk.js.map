{"version":3,"file":"static/js/740.9c964ee6.chunk.js","mappings":"oZAwCA,SAASA,EAAMC,GAAsB,IAArB,KAAEC,EAAI,SAAEC,GAAUF,EAChC,MAAOG,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,eAChDC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,IAEzCG,EAAAA,EAAAA,YAAU,KAER,SAASC,IACP,OAAOC,OAAOC,WAAaC,EAAAA,EAAYC,OAAOC,GAC1CV,EAAmB,YACnBA,EAAmB,aACzB,CAWA,OANAM,OAAOK,iBAAiB,SAAUN,GAGlCA,IAGO,IAAMC,OAAOM,oBAAoB,SAAUP,EAAsB,GACvE,CAACN,IAEJ,MACM,MAAEc,EAAQ,GAAE,aAAEC,EAAY,SAAEC,GAAalB,EAE/C,OACEmB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,SAAS,WAAWC,GAAI,EAAErB,SAAA,EAC/BsB,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CACJI,QAAQ,OACRC,WAAW,SACXJ,SAAS,WACTK,UAAU,WACVC,aAAa,KACbC,GAAI,CACFC,gBAAiBC,IAAA,IAAGC,WAAW,KAAEC,EAAI,eAAEC,GAAkBC,SAAS,UAAEC,IAAaL,EAAA,MAC/E,GAAGG,EACDD,EAAKG,EAAUnC,KAAKoC,KAAM,IAC1BJ,EAAKG,EAAUnC,KAAKqC,MAAO,aACnBR,IAAkB,EAC9BS,eAAgB,QAChBC,mBAAoB,MACpBC,SAAU,aAGdrB,EAAAA,EAAAA,MAACsB,EAAAA,EAAI,CACHb,GAAI,CACFP,SAAU,WACVqB,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,GAAI,GACJ5C,SAAA,EAEFkB,EAAAA,EAAAA,MAAC2B,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGvB,WAAW,SAAQxB,SAAA,EAC7CsB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACG,MAAI,EAAAhD,UACRsB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACC,IAAKnC,EAAOoC,IAAI,gBAAgBC,KAAK,KAAKC,OAAO,UAE7D/B,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACG,MAAI,EAAAhD,UACRkB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACmC,OAAO,OAAOb,GAAI,GAAKc,WAAY,EAAEvD,SAAA,EAC1CsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACC,QAAQ,KAAKC,WAAW,SAAQ1D,SAC3CgB,KAEHM,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACC,QAAQ,SAASE,MAAM,OAAOD,WAAW,UAAS1D,SAC7DiB,YAmCRjB,OAIT,CAEAH,EAAO+D,aAAe,CACpB7D,KAAM,CACJgB,MAAO,GACPC,aAAc,aACdC,SAAU,aAEZjB,SAAU,M,iHC3HG,SAAS6D,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,gBAAEC,IAAoBC,EAAAA,EAAAA,OAE1BC,YAAY,UACVC,EAAY,GAAE,gBACdC,EAAkB,EAAC,MACnBC,EAAQ,EAAC,WACTC,EAAa,EAAC,cACdC,EAAgB,GAAE,YAClBC,EAAc,GAAE,qBAChBC,EAAuB,IACrB,CAAC,EAAC,QACNC,EAAO,uBACPC,IACEC,EAAAA,EAAAA,MACEC,EAAS/E,IAAA,IAAC,MAAEiB,EAAK,KAAE+D,EAAI,QAAEC,EAAO,QAAEC,GAASlF,EAAA,OAC/CoB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACI,QAAQ,OAAOC,WAAW,SAAS+B,WAAY,EAAEvD,SAAA,EACtDsB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACC,IAAKnC,EAAO+D,KAAMA,EAAM1B,KAAK,QACvClC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAC8D,GAAI,EAAG1B,WAAY,EAAEvD,SAAA,EAC1BsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACjC,QAAQ,QAAQkC,QAAQ,SAASC,WAAW,SAAQ1D,UAChEsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,GAAI,IAAInF,SAAE,GAAGgF,KAAWF,SAEhCxD,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACC,QAAQ,UAASzD,SAAE+E,SAE7B,EAEJK,EAAMvD,IAAA,IAAC,MAAEwD,EAAK,YAAEC,GAAazD,EAAA,OACjCX,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACoC,WAAY,EAAGgC,UAAU,OAAMvF,SAAA,EACpCsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACjC,QAAQ,QAAQkC,QAAQ,UAAUE,MAAM,OAAOD,WAAW,SAAQ1D,UAC9EsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,GAAI,IAAInF,SAAE,GAAGqF,SAErB/D,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACC,QAAQ,UAASzD,UAC7BsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,GAAI,IAAInF,SAAE,aAAasF,UAEzB,EAEJE,EAAQC,IAAA,IAAC,MAAEJ,EAAK,YAAEC,GAAaG,EAAA,OACnCvE,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACoC,WAAY,EAAGgC,UAAU,OAAMvF,SAAA,EACpCsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACjC,QAAQ,QAAQkC,QAAQ,UAAUE,MAAM,OAAOD,WAAW,SAAQ1D,SAC7EqF,KAEH/D,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAACC,QAAQ,UAASzD,SAAEsF,MAC3B,EAkIV,MAAO,CACLI,QAAS,CACP,CAAE7F,OAAQ,YAAa8F,SAAU,YAAaC,MAAO,MAAOC,MAAO,QACnE,CAAEhG,OAAQ,UAAW8F,SAAU,UAAWE,MAAO,QACjD,CAAEhG,OAAQ,SAAU8F,SAAU,SAAUE,MAAO,UAC/C,CAAEhG,OAAQ,WAAY8F,SAAU,WAAYE,MAAO,UACnD,CAAEhG,OAAQ,WAAY8F,SAAU,WAAYE,MAAO,UACnD,CAAEhG,OAAQ,WAAY8F,SAAU,WAAYE,MAAO,UACnD,CAAEhG,OAAQ,cAAe8F,SAAU,cAAeE,MAAO,UACzD,CAAEhG,OAAQ,OAAQ8F,SAAU,OAAQE,MAAO,UAC3C,CAAEhG,OAAQ,SAAU8F,SAAU,SAAUE,MAAO,UAC/C,CAAEhG,OAAQ,SAAU8F,SAAU,SAAUE,MAAO,WAEjDC,KA7IW3B,EAAU4B,KAAI,CAACC,EAAkBC,KAC5C,MAAM,QACJjB,EAAO,UACPkB,EAAS,SACTC,EAAQ,SACRC,EAAQ,OACRC,EAAM,iBACNC,EAAgB,SAChBC,EAAQ,cACRC,EAAa,cACbC,EAAa,SACbC,EAAQ,qBACRC,EAAoB,qBACpBC,EAAoB,QACpB7B,EAAO,KACP8B,GACEb,EACEc,EAAU,CACd9B,UACAkB,YACAC,WACAC,WACAC,SACAC,mBACAC,WACAC,gBACAC,gBACAC,WACAC,uBACAC,uBACA7B,UACA8B,QAYF,MAAO,CACL1C,WAAW7C,EAAAA,EAAAA,KAACuD,EAAM,CAAC9D,MAAOgG,EAAAA,EAAWjC,KAAMoB,EAAWnB,QAASA,EAASC,QAASA,IACjFgC,QAAQ1F,EAAAA,EAAAA,KAAC8D,EAAG,CAACC,MAAOc,EAAUb,YAAac,IAC3CC,QACE/E,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CAAC8D,IAAK,EAAEjF,UACZsB,EAAAA,EAAAA,KAAC2F,EAAAA,EAAO,CACNC,aAAcb,EACd1C,MAAkB,QAAX0C,EAAmB,UAAuB,SAAXA,EAAoB,UAAY,QACtE5C,QAAQ,WACRL,KAAK,SAIXnC,UACEK,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CAAC8D,IAAK,EAAEjF,UACZsB,EAAAA,EAAAA,KAAC2F,EAAAA,EAAO,CACNC,aAAcZ,EACd3C,MACuB,cAArB2C,EACI,UACqB,YAArBA,EACA,QACA,UAEN7C,QAAQ,WACRL,KAAK,SAIXmD,UACEjF,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAAC2D,UAAU,IAAI1D,QAAQ,UAAUE,MAAM,OAAOD,WAAW,SAAQ1D,SAC3EuG,IAGLa,UACE9F,EAAAA,EAAAA,KAACkE,EAAK,CACJH,MAAO,SAASoB,EAAgBY,OAAOZ,GAAea,QAAQ,GAAK,SACjEZ,GAAY,KAEdpB,YAAa,iBAAiBkB,GAAiB,UAGnDe,aACEjG,EAAAA,EAAAA,KAACkE,EAAK,CACJH,MAAO,qBAAqBsB,GAAwB,QACpDrB,YAAa,qBAAqBsB,GAAwB,UAG9DC,MACEvF,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CACX6B,MAAOwB,EACPM,UAAU,IACVK,KAAK,IACL/D,QAAQ,UACRE,MAAM,OACND,WAAW,SAAQ1D,SAElB6G,EAAKY,OAAS,GAAK,GAAGZ,EAAKa,MAAM,EAAG,SAAWb,IAGpDc,QACErG,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAAC2D,UAAU,IAAI1D,QAAQ,UAAUE,MAAM,OAAOD,WAAW,SAAQ1D,UAC5EsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CACH0C,QAASA,KAxEf9D,GAAS+D,EAAAA,EAAAA,IAAmBf,GAyER,EAEd3B,GAAI,0BAA0BH,IAAUhF,SACzC,WAKL8H,QACExG,EAAAA,EAAAA,KAACkC,EAAAA,EAAY,CAAC2D,UAAU,IAAI1D,QAAQ,UAAUE,MAAM,OAAOD,WAAW,SAAQ1D,UAC5EsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CACH0C,QAASA,KAjFMpH,OAAOuH,QAC1B,+EAGF/D,EAAgBgB,EA8EM,EACdhF,SACH,aAKN,IAgBDsE,aACAD,QACAK,UACAN,kBACAG,gBACAC,cACAC,uBACAE,yBAEJ,C,iFCtMe,SAASqD,EAAoBlI,GAA8B,IAA7B,uBAAE6E,GAAwB7E,EACrE,MAAOmI,EAAMC,GAAWC,EAAAA,UAAe,GAEjCC,EAAcA,IAAMF,GAAQ,GAGlC,OACEhH,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACEsB,EAAAA,EAAAA,KAAA,OAAAtB,UACEsB,EAAAA,EAAAA,KAAC+G,EAAAA,IAAM,CAACT,QAPKU,IAAMJ,GAAQ,GAOE7C,MAAM,cAKrC/D,EAAAA,EAAAA,KAACiH,EAAAA,EAAK,CACJN,KAAMA,EACNO,QAASJ,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyBpI,UAE1CkB,EAAAA,EAAAA,MAACuH,EAAAA,EAED,CAAAzI,SAAA,EAEEkB,EAAAA,EAAAA,MAACwH,EAAAA,EAAU,CAACC,GAAG,oBAAoBlF,QAAQ,KAAK0D,UAAU,KAAInH,SAAA,CAAC,WACtDsB,EAAAA,EAAAA,KAACsH,EAAAA,EAAS,CAACC,MAAO,CAAEC,OAAQ,WAAalB,QAASQ,QAE3D9G,EAAAA,EAAAA,KAAA,KAAAtB,SAAG,iDACHsB,EAAAA,EAAAA,KAACyH,EAAgB,CACfX,YAAaA,EACbzD,uBAAwBA,WAMpC,CAEA,MAAMoE,EAAmBlH,IAA8C,IAA7C,YAAEuG,EAAW,uBAAEzD,GAAwB9C,EAC/D,MAAM,iBAAEmH,IAAqBpE,EAAAA,EAAAA,MACvBd,GAAWC,EAAAA,EAAAA,MAKjB,OACE7C,EAAAA,EAAAA,MAAA,QAAAlB,SAAA,CACGgJ,EAAiBjD,KAAKkD,IACrB,MAAM,KAAEnE,EAAI,UAAEoE,GAAcD,EAC5B,OAAO3H,EAAAA,EAAAA,KAAA,OAAAtB,SAAiBkJ,GAAPpE,EAAuB,KAE1CxD,EAAAA,EAAAA,KAAC6H,EAAAA,EAAY,CACXC,WAAY,UACZC,gBAAiB,uBACjB/F,OAAQ,MACRsE,QAda0B,KACjBxF,GAASyF,EAAAA,EAAAA,MAAc,EAcnBC,KAAK,SACLX,MAAO,CACLjD,MAAO,OACPlC,WAAY,QACZ1D,SACH,WAGDsB,EAAAA,EAAAA,KAAC6H,EAAAA,EAAY,CACXC,WAAY,UAEZC,gBAAiB,uBACjB/F,OAAQ,MACRsE,QAASA,IAAMQ,IACfoB,KAAK,SACLX,MAAO,CACLjD,MAAO,OAEPlC,WAAY,QACZ1D,SAE0B,YAA3B2E,GAAuCrD,EAAAA,EAAAA,KAACmI,EAAAA,GAAO,CAAC9F,MAAM,YAAe,eAEnE,EC2BX,QA7FA,WACE,MAAMG,GAAWC,EAAAA,EAAAA,OACX,QACJ2B,EAAO,KACPI,EAAI,WACJxB,EAAU,MACVD,EAAK,QACLK,EAAO,gBACPN,EAAe,cACfG,EAAa,YACbC,EAAW,qBACXC,EAAoB,uBACpBE,GACEd,KACE,MACJ6F,EAAK,UACLxD,EAAS,SACTK,EAAQ,SACRG,EAAQ,OACRL,EAAM,iBACNC,EAAgB,QAChBvB,EAAO,SACPoB,EAAQ,SACRC,EAAQ,cACRK,EAAa,cACbD,EAAa,KACbmD,IACEC,EAAAA,EAAAA,KAAaC,GAAUA,EAAM3F,aAsBjC,OAhBAiE,EAAAA,WAAgB,KACdzD,GAAS,GACR,CACDgF,EACAxD,EACAK,EACAG,EACAL,EACAC,EACAvB,EACAoB,EACAC,EACAK,EACAD,EACAmD,KAGAzI,EAAAA,EAAAA,MAAC4I,EAAAA,EAAe,CAAA9J,SAAA,EACdsB,EAAAA,EAAAA,KAACyI,EAAAA,EAAe,KAChBzI,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CAAC6I,GAAI,EAAGC,GAAI,EAAEjK,UAClBsB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE/C,UACzBkB,EAAAA,EAAAA,MAAC2B,EAAAA,GAAI,CAACG,MAAI,EAACkH,GAAI,GAAGlK,SAAA,EAChBkB,EAAAA,EAAAA,MAACsB,EAAAA,EAAI,CAAAxC,SAAA,EACHsB,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CACJuB,GAAI,EACJD,IAAK,EACLE,GAAI,EACJC,GAAI,EACJa,QAAQ,WACR0G,QAAQ,OACRzI,aAAa,KACb0I,cAAc,OAAMpK,UAEpBkB,EAAAA,EAAAA,MAACsC,EAAAA,EAAY,CAACC,QAAQ,KAAKE,MAAM,QAAO3D,SAAA,CAAC,aAEtCqE,EAAM,IAAED,GACT9C,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAAC0C,QAASA,IAAM9D,GAASyF,EAAAA,EAAAA,OAAgBpE,GAAG,6BAA4BnF,SAAC,sBAG9EsB,EAAAA,EAAAA,KAAC0G,EAAoB,CAACrD,uBAAwBA,UAGlDrD,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CAAC6I,GAAI,EAAEhK,UACXsB,EAAAA,EAAAA,KAAC+I,EAAAA,EAAS,CACRC,MAAO,CAAE5E,UAASI,QAClByE,UAAU,EACVC,gBAAgB,EAChBC,kBAAkB,EAClBC,aAAW,UAIjBpJ,EAAAA,EAAAA,KAACqJ,EAAAA,EAAoB,CAACC,YAAa,CAAEC,aAxD1BA,CAACC,EAAOC,KAC3BD,EAAME,iBACNlH,GAASmH,EAAAA,EAAAA,IAAWF,GAAO,EAsDgCzG,aAAYoF,mBAIrEpI,EAAAA,EAAAA,KAAC4J,EAAAA,EAAM,MAGb,EAuHaC,EAAwBA,MAClBpH,EAAAA,EAAAA,MAAjB,MACM,GAAE4E,IAAOyC,EAAAA,EAAAA,MACT,iBAAEC,IAAqBzG,EAAAA,EAAAA,OACvB,oBAAE0G,EAAmB,gBAAEC,IAAoBC,EAAAA,EAAAA,OAC3C,oBAAEC,EAAmB,gBAAEC,IAAoBC,EAAAA,EAAAA,OAC3C,OACJC,EAAM,UACN1F,EAAS,SACTC,EAAQ,SACRC,EAAQ,OACRC,EAAM,iBACNC,EAAgB,SAChBC,EAAQ,cACRC,EAAa,cACbC,EAAa,SACbC,EAAQ,qBACRC,EAAoB,qBACpBC,EAAoB,QACpB7B,EAAO,KACP8B,IACE+C,EAAAA,EAAAA,KAAaC,GAAUA,EAAM3F,aAC3B2H,EAAoB,CACxB3F,YACAC,WACAC,WACAC,SACAC,mBACAC,WACAC,gBACAC,gBACAC,WAGAG,QAGIiF,EAAyB,CAC7B5F,YACAC,WACAC,WACAC,SACAC,mBACAC,WACAC,gBACAC,gBACAC,WACAC,uBACAC,uBACA7B,UACA8B,QAuBF,OACE3F,EAAAA,EAAAA,MAAC4I,EAAAA,EAAe,CAAA9J,SAAA,EACdsB,EAAAA,EAAAA,KAACyI,EAAAA,EAAe,KAGhBzI,EAAAA,EAAAA,KAACH,EAAAA,EAAK,CAACsB,GAAI,EAAGpB,GAAI,EAAErB,UAClBsB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAE/C,UACzBkB,EAAAA,EAAAA,MAAC2B,EAAAA,GAAI,CAACG,MAAI,EAACkH,GAAI,GAAI6B,GAAI,EAAGC,GAAI,EAAGrK,GAAI,CAAEJ,QAAS,QAASvB,SAAA,EACvDsB,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CAACC,YAAY,WAAWvK,GAAI,CAAEsD,IAAK,EAAGkH,GAAI,MAClDjL,EAAAA,EAAAA,MAAA,OAAAlB,SAAA,EACEsB,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,GAAI,cAAcnF,SAAC,aACzBkB,EAAAA,EAAAA,MAAA,QAAMkL,SA/BIC,IACpBA,EAAErB,iBAEF,MAAMsB,EAAoBV,EAASE,EAAyBD,EAM5D,GAJgBU,OAAO5L,OAAO2L,GAAmBE,OAC9CzB,QAAoB0B,IAAV1B,GAAiC,OAAVA,GAA4B,KAAVA,IAQtD,OAAIa,EACKF,EAAgB,CAAEI,yBAAwBnD,YAGnD4C,EAAgBM,GARda,MAAM,+EAQ0B,EAaK1M,SAAA,CAC1BqL,EACEsB,QAAQ3F,KAEW,SAAhBA,EAAOlC,QACL8G,GACiB,YAAhB5E,EAAOlC,MACU,yBAAhBkC,EAAOlC,MACS,yBAAhBkC,EAAOlC,SAMdiB,KAAKiB,IACJ,MAAM,KAAElC,EAAI,UAAEoE,GAAclC,EAC5B,OAAO1F,EAAAA,EAAAA,KAAA,OAAAtB,SAAiBkJ,GAAPpE,EAAuB,KAG5CxD,EAAAA,EAAAA,KAAC6H,EAAAA,GAAY,CACXC,WAAY,YACZC,gBAAiB,UACjBjG,KAAM,OACNE,OAAQ,MACRkG,KAAK,SACLxJ,SAEyB,YAAxBsL,GAA6D,YAAxBG,GACpCnK,EAAAA,EAAAA,KAACmI,EAAAA,GAAO,IACNmC,EACF,SAEA,kBAKRtK,EAAAA,EAAAA,KAAC2K,EAAAA,EAAO,CAACC,YAAY,WAAWvK,GAAI,CAAEe,GAAI,aAKhDpB,EAAAA,EAAAA,KAAC4J,EAAAA,EAAM,MACS,C","sources":["layouts/equipments/profile/components/Header/index.js","layouts/equipments/data/equipmentsTableData.js","components copy/searchModals/EquipmentSearchModal.jsx","layouts/equipments/index.js"],"sourcesContent":["/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// prop-types is a library for typechecking of props.\r\nimport PropTypes from \"prop-types\";\r\n\r\n// @mui material components\r\nimport Card from \"@mui/material/Card\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport AppBar from \"@mui/material/AppBar\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Icon from \"@mui/material/Icon\";\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\n\r\n// Material Dashboard 2 React base styles\r\nimport breakpoints from \"assets/theme/base/breakpoints\";\r\n\r\n// Images\r\nimport burceMars from \"assets/images/bruce-mars.jpg\";\r\nimport backgroundImage from \"assets/images/bg-profile.jpeg\";\r\n\r\nfunction Header({ info, children }) {\r\n  const [tabsOrientation, setTabsOrientation] = useState(\"horizontal\");\r\n  const [tabValue, setTabValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // A function that sets the orientation state of the tabs.\r\n    function handleTabsOrientation() {\r\n      return window.innerWidth < breakpoints.values.sm\r\n        ? setTabsOrientation(\"vertical\")\r\n        : setTabsOrientation(\"horizontal\");\r\n    }\r\n\r\n    /** \r\n     The event listener that's calling the handleTabsOrientation function when resizing the window.\r\n    */\r\n    window.addEventListener(\"resize\", handleTabsOrientation);\r\n\r\n    // Call the handleTabsOrientation function to set the state with the initial value.\r\n    handleTabsOrientation();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleTabsOrientation);\r\n  }, [tabsOrientation]);\r\n\r\n  const handleSetTabValue = (event, newValue) => setTabValue(newValue);\r\n  const { image = \"\", station_name, location } = info;\r\n\r\n  return (\r\n    <MDBox position=\"relative\" mb={5}>\r\n      <MDBox\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        position=\"relative\"\r\n        minHeight=\"18.75rem\"\r\n        borderRadius=\"xl\"\r\n        sx={{\r\n          backgroundImage: ({ functions: { rgba, linearGradient }, palette: { gradients } }) =>\r\n            `${linearGradient(\r\n              rgba(gradients.info.main, 0.6),\r\n              rgba(gradients.info.state, 0.6)\r\n            )}, url(${backgroundImage})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"50%\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      />\r\n      <Card\r\n        sx={{\r\n          position: \"relative\",\r\n          mt: -8,\r\n          mx: 3,\r\n          py: 2,\r\n          px: 2,\r\n        }}\r\n      >\r\n        <Grid container spacing={3} alignItems=\"center\">\r\n          <Grid item>\r\n            <MDAvatar src={image} alt=\"profile-image\" size=\"xl\" shadow=\"sm\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <MDBox height=\"100%\" mt={0.5} lineHeight={1}>\r\n              <MDTypography variant=\"h5\" fontWeight=\"medium\">\r\n                {station_name}\r\n              </MDTypography>\r\n              <MDTypography variant=\"button\" color=\"text\" fontWeight=\"regular\">\r\n                {location}\r\n              </MDTypography>\r\n            </MDBox>\r\n          </Grid>\r\n          {/* <Grid item xs={12} md={6} lg={4} sx={{ ml: \"auto\" }}>\r\n            <AppBar position=\"static\">\r\n              <Tabs orientation={tabsOrientation} value={tabValue} onChange={handleSetTabValue}>\r\n                <Tab\r\n                  label=\"App\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      home\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Message\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      email\r\n                    </Icon>\r\n                  }\r\n                />\r\n                <Tab\r\n                  label=\"Settings\"\r\n                  icon={\r\n                    <Icon fontSize=\"small\" sx={{ mt: -0.25 }}>\r\n                      settings\r\n                    </Icon>\r\n                  }\r\n                />\r\n              </Tabs>\r\n            </AppBar>\r\n          </Grid> */}\r\n        </Grid>\r\n        {children}\r\n      </Card>\r\n    </MDBox>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  info: {\r\n    image: \"\", // Fallback image URL\r\n    station_name: \"First Name\",\r\n    location: \"Last Name\",\r\n  },\r\n  children: null,\r\n};\r\n\r\nHeader.propTypes = {\r\n  info: PropTypes.shape({\r\n    image: PropTypes.string,\r\n    station_name: PropTypes.string,\r\n    location: PropTypes.string,\r\n  }),\r\n  children: PropTypes.node,\r\n};\r\nexport default Header;\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/function-component-definition */\r\n/**\r\n=========================================================\r\n* Material Dashboard 2 React - v2.2.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\r\n* Copyright 2023 Creative Tim (https://www.creative-tim.com)\r\n\r\nCoded by www.creative-tim.com\r\n\r\n =========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n*/\r\n\r\n// Material Dashboard 2 React components\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport MDAvatar from \"components/MDAvatar\";\r\nimport MDBadge from \"components/MDBadge\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport { useEquipments } from \"features/equuipments/equipmentThunk\";\r\nimport { useDeleteEquipment } from \"features/equuipments/equipmentThunk\";\r\nimport { setUpdateEquipment } from \"features/equuipments/equipmentSlice\";\r\nexport default function equipmentsTableData() {\r\n  const dispatch = useDispatch();\r\n  const { deleteEquipment } = useDeleteEquipment();\r\n  const {\r\n    equipments: {\r\n      equipment = [],\r\n      totalEquipments = 0,\r\n      count = 0,\r\n      numOfPages = 0,\r\n      categoryCount = [],\r\n      statusCount = [],\r\n      storageLocationCount = [],\r\n    } = {},\r\n    refetch,\r\n    isGettingAllequipments,\r\n  } = useEquipments();\r\n  const Author = ({ image, name, retired, tool_id }) => (\r\n    <MDBox display=\"flex\" alignItems=\"center\" lineHeight={1}>\r\n      <MDAvatar src={image} name={name} size=\"sm\" />\r\n      <MDBox ml={2} lineHeight={1}>\r\n        <MDTypography display=\"block\" variant=\"button\" fontWeight=\"medium\">\r\n          <Link to={`#`}>{`${tool_id} ${name}`}</Link>\r\n        </MDTypography>\r\n        <MDTypography variant=\"caption\">{retired}</MDTypography>\r\n      </MDBox>\r\n    </MDBox>\r\n  );\r\n  const Job = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        <Link to={`#`}>{`${title}`}</Link>\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">\r\n        <Link to={`#`}>{`quantity: ${description}`}</Link>\r\n      </MDTypography>\r\n    </MDBox>\r\n  );\r\n  const Coord = ({ title, description }) => (\r\n    <MDBox lineHeight={1} textAlign=\"left\">\r\n      <MDTypography display=\"block\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n        {title}\r\n      </MDTypography>\r\n      <MDTypography variant=\"caption\">{description}</MDTypography>\r\n    </MDBox>\r\n  );\r\n  const rows = equipment.map((single_equipment, i) => {\r\n    const {\r\n      tool_id,\r\n      tool_name,\r\n      category,\r\n      quantity,\r\n      status,\r\n      storage_location,\r\n      supplier,\r\n      purchase_date,\r\n      purchase_cost,\r\n      currency,\r\n      last_maintanace_date,\r\n      next_maintanace_date,\r\n      retired,\r\n      note,\r\n    } = single_equipment;\r\n    const payload = {\r\n      tool_id,\r\n      tool_name,\r\n      category,\r\n      quantity,\r\n      status,\r\n      storage_location,\r\n      supplier,\r\n      purchase_date,\r\n      purchase_cost,\r\n      currency,\r\n      last_maintanace_date,\r\n      next_maintanace_date,\r\n      retired,\r\n      note,\r\n    };\r\n    const handleEdit = () => {\r\n      dispatch(setUpdateEquipment(payload));\r\n    };\r\n    const handleDelete = () => {\r\n      const confirmation = window.confirm(\r\n        \"You are about to Delete an an equipment records permanently, ARE YOU SURE?\"\r\n      );\r\n      if (!confirmation) return;\r\n      deleteEquipment(tool_id);\r\n    };\r\n    return {\r\n      equipment: <Author image={LogoAsana} name={tool_name} retired={retired} tool_id={tool_id} />,\r\n      detail: <Job title={category} description={quantity} />,\r\n      status: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={status}\r\n            color={status === \"new\" ? \"success\" : status === \"used\" ? \"warning\" : \"error\"}\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      location: (\r\n        <MDBox ml={-1}>\r\n          <MDBadge\r\n            badgeContent={storage_location}\r\n            color={\r\n              storage_location === \"warehouse\"\r\n                ? \"success\"\r\n                : storage_location === \"factory\"\r\n                ? \"error\"\r\n                : \"warning\"\r\n            }\r\n            variant=\"gradient\"\r\n            size=\"sm\"\r\n          />\r\n        </MDBox>\r\n      ),\r\n      supplier: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          {supplier}\r\n        </MDTypography>\r\n      ),\r\n      acquired: (\r\n        <Coord\r\n          title={`Cost: ${purchase_cost ? Number(purchase_cost).toFixed(2) : \"N/A\"} ${\r\n            currency || \"\"\r\n          }`}\r\n          description={`Purchased on: ${purchase_date || \"N/A\"}`}\r\n        />\r\n      ),\r\n      maintenance: (\r\n        <Coord\r\n          title={`Last maintenance: ${last_maintanace_date || \"N/A\"}`}\r\n          description={`Next maintenance: ${next_maintanace_date || \"N/A\"}`}\r\n        />\r\n      ),\r\n      note: (\r\n        <MDTypography\r\n          title={note}\r\n          component=\"a\"\r\n          href=\"#\"\r\n          variant=\"caption\"\r\n          color=\"text\"\r\n          fontWeight=\"medium\"\r\n        >\r\n          {note.length > 20 ? `${note.slice(0, 20)}...` : note}\r\n        </MDTypography>\r\n      ),\r\n      update: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleEdit();\r\n            }}\r\n            to={`/createupdateequipment/${tool_id}`}\r\n          >\r\n            Edit\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n      remove: (\r\n        <MDTypography component=\"a\" variant=\"caption\" color=\"text\" fontWeight=\"medium\">\r\n          <Link\r\n            onClick={() => {\r\n              handleDelete();\r\n            }}\r\n          >\r\n            Remove\r\n          </Link>\r\n        </MDTypography>\r\n      ),\r\n    };\r\n  });\r\n  return {\r\n    columns: [\r\n      { Header: \"equipment\", accessor: \"equipment\", width: \"45%\", align: \"left\" },\r\n      { Header: \"details\", accessor: \"details\", align: \"left\" },\r\n      { Header: \"status\", accessor: \"status\", align: \"center\" },\r\n      { Header: \"location\", accessor: \"location\", align: \"center\" },\r\n      { Header: \"supplier\", accessor: \"supplier\", align: \"center\" },\r\n      { Header: \"acquired\", accessor: \"acquired\", align: \"center\" },\r\n      { Header: \"maintenance\", accessor: \"maintenance\", align: \"center\" },\r\n      { Header: \"note\", accessor: \"note\", align: \"center\" },\r\n      { Header: \"update\", accessor: \"update\", align: \"center\" },\r\n      { Header: \"remove\", accessor: \"remove\", align: \"center\" },\r\n    ],\r\n    rows: rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    totalEquipments,\r\n    categoryCount,\r\n    statusCount,\r\n    storageLocationCount,\r\n    isGettingAllequipments,\r\n  };\r\n}\r\n","import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport { BiSort } from \"react-icons/bi\";\r\n// import styles from \"../../styles/components/deliveryaddressmodal.module.scss\";\r\n// import styles from \"../../\"\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"../Button\";\r\n// import { useEmployee } from \"../../hooks/register\";\r\nimport { Loader1 } from \"../Loader\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEquipments } from \"../../hooks/DashDetails\";\r\nimport { resetValues } from \"../../features/equuipments/equipmentSlice\";\r\n// import { resetValues } from \"../../features/stations/stationSlice\";\r\n// import { useDashDetails_1 } from \"../../hooks/DashDetails\";\r\n// import { resetValues } from \"../../features/employees/employeesSlice\";\r\n// import { useThemeContext } from \"../../hooks/ThemeContext\";\r\n// import QueryOrder from \"../QueryOrder\";\r\n// import QueryProduct from \"./QueryProduct\";\r\nconst style = {\r\n  position: \"absolute\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nexport default function EquipmentSearchModal({ isGettingAllequipments }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  //   const { theme } = useThemeContext();\r\n  //   const isDarkMode = theme === \"dark-theme\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <BiSort onClick={handleOpen} title=\"filter\" />\r\n        {/* <button onClick={handleOpen} title=\"filter\">\r\n          search\r\n        </button> */}\r\n      </div>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box\r\n        //   sx={{ ...style, background: isDarkMode ? \"black\" : \"white\" }}\r\n        //   className={styles.box}\r\n        >\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Filter <CloseIcon style={{ cursor: \"pointer\" }} onClick={handleClose} />\r\n          </Typography>\r\n          <p>which of your products are you looking for?</p>\r\n          <SearchEquipments\r\n            handleClose={handleClose}\r\n            isGettingAllequipments={isGettingAllequipments}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SearchEquipments = ({ handleClose, isGettingAllequipments }) => {\r\n  const { searchEquipments } = useEquipments();\r\n  const dispatch = useDispatch();\r\n  const resetQuery = () => {\r\n    dispatch(resetValues());\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      {searchEquipments.map((input) => {\r\n        const { name, TextField } = input;\r\n        return <div key={name}>{TextField}</div>;\r\n      })}\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={resetQuery}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        reset\r\n      </CustomButton>\r\n      <CustomButton\r\n        background={\"inherit\"}\r\n        // background={\"#3457bf\"}\r\n        backgroundhover={\"rgba(0, 128, 0, 0.9)\"}\r\n        height={\"8vh\"}\r\n        onClick={() => handleClose()}\r\n        type=\"button\"\r\n        style={{\r\n          width: \"100%\",\r\n          // color: \"white\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n      >\r\n        {isGettingAllequipments === \"pending\" ? <Loader1 color=\"success\" /> : \"Find Out\"}\r\n      </CustomButton>\r\n    </form>\r\n  );\r\n};\r\nimport PropTypes from \"prop-types\";\r\n\r\nEquipmentSearchModal.propTypes = {\r\n  isGettingAllequipments: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n\r\nSearchEquipments.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n  isGettingAllequipments: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.bool, // Adjust based on the expected type\r\n  ]).isRequired,\r\n};\r\n","import Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\nimport React from \"react\";\r\nimport MDBox from \"components/MDBox\";\r\nimport MDTypography from \"components/MDTypography\";\r\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\r\nimport DashboardNavbar from \"examples/Navbars/DashboardNavbar\";\r\nimport Footer from \"examples/Footer\";\r\nimport DataTable from \"examples/Tables/DataTable\";\r\n// Data\r\n// import employeesTableData from \"layouts/tables/data/employeesTableData\";\r\nimport projectsTableData from \"layouts/tables/data/projectsTableData\";\r\n// import { useSingleEmployee } from \"features/employees/employeesThunk\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Divider from \"@mui/material/Divider\";\r\n// @mui icons\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport TwitterIcon from \"@mui/icons-material/Twitter\";\r\nimport { Email } from \"@mui/icons-material\";\r\nimport ProfileInfoCard from \"examples/Cards/InfoCards/ProfileInfoCard\";\r\nimport ProfilesList from \"examples/Lists/ProfilesList\";\r\nimport DefaultProjectCard from \"examples/Cards/ProjectCards/DefaultProjectCard\";\r\nimport Header from \"./profile/components/Header\";\r\nimport PlatformSettings from \"./profile/components/PlatformSettings\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { useUploadEmployeeImages } from \"features/employees/employeesThunk\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CustomButton } from \"components copy\";\r\nimport { Loader1 } from \"components copy/Loader\";\r\nimport PaginationControlled from \"components copy/component's_Tables/Pagination\";\r\nimport LogoAsana from \"assets/images/small-logos/logo-asana.svg\";\r\nimport moment from \"moment\";\r\nimport equipmentsTableData from \"./data/equipmentsTableData\";\r\nimport { changePage } from \"features/equuipments/equipmentSlice\";\r\nimport EquipmentSearchModal from \"components copy/searchModals/EquipmentSearchModal\";\r\nimport { useEquipments } from \"hooks/DashDetails\";\r\nimport { useCreateEqupment } from \"features/equuipments/equipmentThunk\";\r\nimport { useUpdateEquipment } from \"features/equuipments/equipmentThunk\";\r\nimport { resetValues } from \"features/equuipments/equipmentSlice\";\r\n\r\nfunction Equipments() {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    columns,\r\n    rows,\r\n    numOfPages,\r\n    count,\r\n    refetch,\r\n    totalEquipments,\r\n    categoryCount,\r\n    statusCount,\r\n    storageLocationCount,\r\n    isGettingAllequipments,\r\n  } = equipmentsTableData();\r\n  const {\r\n    pages,\r\n    tool_name,\r\n    supplier,\r\n    currency,\r\n    status,\r\n    storage_location,\r\n    retired,\r\n    category,\r\n    quantity,\r\n    purchase_cost,\r\n    purchase_date,\r\n    sort,\r\n  } = useSelector((store) => store.equipments);\r\n\r\n  const handleChange = (event, value) => {\r\n    event.preventDefault();\r\n    dispatch(changePage(value));\r\n  };\r\n  React.useEffect(() => {\r\n    refetch();\r\n  }, [\r\n    pages,\r\n    tool_name,\r\n    supplier,\r\n    currency,\r\n    status,\r\n    storage_location,\r\n    retired,\r\n    category,\r\n    quantity,\r\n    purchase_cost,\r\n    purchase_date,\r\n    sort,\r\n  ]);\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      <MDBox pt={6} pb={3}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={12}>\r\n            <Card>\r\n              <MDBox\r\n                mx={2}\r\n                mt={-3}\r\n                py={3}\r\n                px={2}\r\n                variant=\"gradient\"\r\n                bgColor=\"info\"\r\n                borderRadius=\"lg\"\r\n                coloredShadow=\"info\"\r\n              >\r\n                <MDTypography variant=\"h6\" color=\"white\">\r\n                  Equipments\r\n                  {count}/{totalEquipments}\r\n                  <Link onClick={() => dispatch(resetValues())} to=\"/createupdateequipment/add\">\r\n                    create equipment\r\n                  </Link>\r\n                  <EquipmentSearchModal isGettingAllequipments={isGettingAllequipments} />\r\n                </MDTypography>\r\n              </MDBox>\r\n              <MDBox pt={3}>\r\n                <DataTable\r\n                  table={{ columns, rows }}\r\n                  isSorted={false}\r\n                  entriesPerPage={false}\r\n                  showTotalEntries={false}\r\n                  noEndBorder\r\n                />\r\n              </MDBox>\r\n            </Card>\r\n            <PaginationControlled pageDetails={{ handleChange, numOfPages, pages }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n}\r\nexport default Equipments;\r\n\r\n// export function SingleStation() {\r\n//   const { id } = useParams();\r\n//   const {\r\n//     isGettingSingleStation,\r\n//     singleStation: {\r\n//       station: {\r\n//         honey_harvests = [],\r\n//         last_inspection_date,\r\n//         latitude,\r\n//         location,\r\n//         longitude,\r\n//         next_inspection_date,\r\n//         notes,\r\n//         number_of_hive_boxes,\r\n//         station_id,\r\n//         station_maintainace_history,\r\n//         station_name,\r\n//         station_size,\r\n//         status,\r\n//         supervisor_ext,\r\n//         supervisor_int,\r\n//       } = {},\r\n//     } = {},\r\n//     refetch,\r\n//   } = useSingleStation(id);\r\n//   React.useEffect(() => {\r\n//     refetch();\r\n//   }, [id]);\r\n//   return (\r\n//     <DashboardLayout>\r\n//       <DashboardNavbar />\r\n//       <MDBox mb={2} />\r\n//       <Header info={{ image: LogoAsana, station_name, location }}>\r\n//         <MDBox mt={5} mb={3}>\r\n//           <Link to=\"/stations\">Go back</Link>\r\n//           <Link to=\"/harvests\">back to harvest</Link>\r\n//           <Grid container spacing={1}>\r\n//             <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n//               <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n//               <ProfileInfoCard\r\n//                 title=\"\"\r\n//                 description=\"\"\r\n//                 info={{\r\n//                   station_id,\r\n//                   station_Name: station_name,\r\n//                   location,\r\n//                   station_size,\r\n//                   status,\r\n//                   hive_boxes: number_of_hive_boxes,\r\n//                 }}\r\n//                 shadow={false}\r\n//               />\r\n//               <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n//             </Grid>\r\n\r\n//             <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n//               <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n//               <ProfileInfoCard\r\n//                 title=\"\"\r\n//                 description=\"\"\r\n//                 info={{\r\n//                   longitude: Number(longitude)?.toFixed(2) || \"N/A\",\r\n//                   latitude: Number(latitude)?.toFixed(2) || \"N/A\",\r\n\r\n//                   internal_supervisor: (\r\n//                     <Link to={`/employees/${supervisor_int}`}>{supervisor_int}</Link>\r\n//                   ),\r\n//                   external_supervisor: (\r\n//                     <Link to={`/employees/${supervisor_ext}`}>{supervisor_ext}</Link>\r\n//                   ),\r\n//                   last_inspection: last_inspection_date\r\n//                     ? moment(last_inspection_date).format(\"YYYY-MM-DD\")\r\n//                     : \"N/A\",\r\n//                   next_inspection: next_inspection_date\r\n//                     ? moment(next_inspection_date).format(\"YYYY-MM-DD\")\r\n//                     : \"N/A\",\r\n//                 }}\r\n//                 shadow={false}\r\n//               />\r\n//               <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n//             </Grid>\r\n\r\n//             <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n//               <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n//               <ProfileInfoCard\r\n//                 title=\"\"\r\n//                 description=\"\"\r\n//                 info={{\r\n//                   maintaince: station_maintainace_history,\r\n//                   notes,\r\n//                   ...(honey_harvests.length > 0 && {\r\n//                     honey_harvests: honey_harvests\r\n//                       .map(\r\n//                         (\r\n//                           { harvest_year, harvest_date, quantity_collected, unit, quality_rating },\r\n//                           index\r\n//                         ) =>\r\n//                           `Harvest ${\r\n//                             index + 1\r\n//                           }: Year: ${harvest_year}, Date: ${harvest_date}, Quantity: ${quantity_collected} ${unit}, Rating: ${quality_rating}/5`\r\n//                       )\r\n//                       .join(\" | \"), // Join them as a single string with a separator like \" | \" or \"\\n\"\r\n//                   }),\r\n//                 }}\r\n//                 shadow={false}\r\n//               />\r\n//               <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n//             </Grid>\r\n//           </Grid>\r\n//         </MDBox>\r\n//       </Header>\r\n//       <Footer />\r\n//     </DashboardLayout>\r\n//   );\r\n// }\r\n\r\nexport const CreateUpdateEquipment = () => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n  const { equipmentDetails } = useEquipments();\r\n  const { isCreatingEquipment, createEquipment } = useCreateEqupment();\r\n  const { isUpdatingEquipment, updateEquipment } = useUpdateEquipment();\r\n  const {\r\n    isEdit,\r\n    tool_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    purchase_date,\r\n    purchase_cost,\r\n    currency,\r\n    last_maintanace_date,\r\n    next_maintanace_date,\r\n    retired,\r\n    note,\r\n  } = useSelector((store) => store.equipments);\r\n  const equipment_details = {\r\n    tool_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    purchase_date,\r\n    purchase_cost,\r\n    currency,\r\n    // last_maintanace_date,\r\n    // next_maintanace_date,\r\n    note,\r\n  };\r\n\r\n  const equipmentdetailsOnEdit = {\r\n    tool_name,\r\n    category,\r\n    quantity,\r\n    status,\r\n    storage_location,\r\n    supplier,\r\n    purchase_date,\r\n    purchase_cost,\r\n    currency,\r\n    last_maintanace_date,\r\n    next_maintanace_date,\r\n    retired,\r\n    note,\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Conditionally include inspection dates in the validation check if isEdit is true\r\n    const detailsToValidate = isEdit ? equipmentdetailsOnEdit : equipment_details;\r\n\r\n    const isValid = Object.values(detailsToValidate).every(\r\n      (value) => value !== undefined && value !== null && value !== \"\"\r\n    );\r\n\r\n    if (!isValid) {\r\n      alert(\"Please fill out all required fields,especially the dates field if available.\");\r\n      return;\r\n    }\r\n\r\n    if (isEdit) {\r\n      return updateEquipment({ equipmentdetailsOnEdit, id });\r\n    }\r\n\r\n    createEquipment(equipment_details);\r\n  };\r\n  return (\r\n    <DashboardLayout>\r\n      <DashboardNavbar />\r\n      {/* <MDBox mb={2} /> */}\r\n      {/* <Header info={{ image, first_name, last_name, role }}> */}\r\n      <MDBox mt={5} mb={3}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={6} xl={4} sx={{ display: \"flex\" }}>\r\n            <Divider orientation=\"vertical\" sx={{ ml: -2, mr: 1 }} />\r\n            <div>\r\n              <Link to={`/equipments`}>Go back</Link>\r\n              <form onSubmit={handleSubmit}>\r\n                {equipmentDetails\r\n                  .filter((detail) => {\r\n                    if (\r\n                      detail.name === \"sort\" || // Exclude 'sort' in all cases\r\n                      (!isEdit &&\r\n                        (detail.name === \"retired\" ||\r\n                          detail.name === \"last_maintanace_date\" ||\r\n                          detail.name === \"next_maintanace_date\"))\r\n                    ) {\r\n                      return false; // Exclude these fields\r\n                    }\r\n                    return true; // Include all other fields\r\n                  })\r\n                  .map((detail) => {\r\n                    const { name, TextField } = detail;\r\n                    return <div key={name}>{TextField}</div>;\r\n                  })}\r\n\r\n                <CustomButton\r\n                  background={\"#1212121F\"}\r\n                  backgroundhover={\"#59d9d9\"}\r\n                  size={\"100%\"}\r\n                  height={\"3vh\"}\r\n                  type=\"submit\"\r\n                  // disabled={!isValid}\r\n                >\r\n                  {isCreatingEquipment === \"pending\" || isUpdatingEquipment === \"pending\" ? (\r\n                    <Loader1 />\r\n                  ) : isEdit ? (\r\n                    \"Update\"\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </CustomButton>\r\n              </form>\r\n            </div>\r\n            <Divider orientation=\"vertical\" sx={{ mx: 0 }} />\r\n          </Grid>\r\n        </Grid>\r\n      </MDBox>\r\n      {/* </Header> */}\r\n      <Footer />\r\n    </DashboardLayout>\r\n  );\r\n};\r\n"],"names":["Header","_ref","info","children","tabsOrientation","setTabsOrientation","useState","tabValue","setTabValue","useEffect","handleTabsOrientation","window","innerWidth","breakpoints","values","sm","addEventListener","removeEventListener","image","station_name","location","_jsxs","MDBox","position","mb","_jsx","display","alignItems","minHeight","borderRadius","sx","backgroundImage","_ref2","functions","rgba","linearGradient","palette","gradients","main","state","backgroundSize","backgroundPosition","overflow","Card","mt","mx","py","px","Grid","container","spacing","item","MDAvatar","src","alt","size","shadow","height","lineHeight","MDTypography","variant","fontWeight","color","defaultProps","equipmentsTableData","dispatch","useDispatch","deleteEquipment","useDeleteEquipment","equipments","equipment","totalEquipments","count","numOfPages","categoryCount","statusCount","storageLocationCount","refetch","isGettingAllequipments","useEquipments","Author","name","retired","tool_id","ml","Link","to","Job","title","description","textAlign","Coord","_ref3","columns","accessor","width","align","rows","map","single_equipment","i","tool_name","category","quantity","status","storage_location","supplier","purchase_date","purchase_cost","currency","last_maintanace_date","next_maintanace_date","note","payload","LogoAsana","detail","MDBadge","badgeContent","component","acquired","Number","toFixed","maintenance","href","length","slice","update","onClick","setUpdateEquipment","remove","confirm","EquipmentSearchModal","open","setOpen","React","handleClose","BiSort","handleOpen","Modal","onClose","Box","Typography","id","CloseIcon","style","cursor","SearchEquipments","searchEquipments","input","TextField","CustomButton","background","backgroundhover","resetQuery","resetValues","type","Loader1","pages","sort","useSelector","store","DashboardLayout","DashboardNavbar","pt","pb","xs","bgColor","coloredShadow","DataTable","table","isSorted","entriesPerPage","showTotalEntries","noEndBorder","PaginationControlled","pageDetails","handleChange","event","value","preventDefault","changePage","Footer","CreateUpdateEquipment","useParams","equipmentDetails","isCreatingEquipment","createEquipment","useCreateEqupment","isUpdatingEquipment","updateEquipment","useUpdateEquipment","isEdit","equipment_details","equipmentdetailsOnEdit","md","xl","Divider","orientation","mr","onSubmit","e","detailsToValidate","Object","every","undefined","alert","filter"],"sourceRoot":""}